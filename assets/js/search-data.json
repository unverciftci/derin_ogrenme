{
  
    
        "post0": {
            "title": "Veri Yönetimi(✗)",
            "content": "Veri Y&#246;netimi . Birşey yapılması için veri depolamak ve veri işlemeye bir yol bulmamız gerekir. Genel olarak veri ile yapmamız gereken iki önemli şey vardır: (i) veriyi elde etmek, (ii) bilgisayara girdikten sonra verileri işlemek. Veri depolamanın bir yolu olmadan elde etmenin bir anlamı yok. Bu yüzden önce sentetik verileri ele alarak başlayalım. Başlamak için n-boyutlu dizi ortaya koyuyoruz. Numpy ve MXNet&#39;te böyle bir diziye ndarray PyTorch ve TensorFlow da Tensor denir. Bu kitap boyunca ndarray ismini kullanıyoruz. ndarray bir sınıftır ve her örneğe bir ndarray diyoruz. . MXNet . Python&#39;da en çok kullanılan bilimsel hesaplama paketi olan Numpy çalıştıysanız, bu bölümü tanıdık bulacaksınız. MXNet de ndarray bir sınıftır ve her hangi bir tensor(n boyurlu dizi) bir ndarray örneğidir. MXNet&#39;in tensorleri, Numpy&#39;ın tensorlerine(n boyutlu dizilerine) birkaç önemli özellik ile birlikte bir genişlemesidir. İlk olarak MXNet&#39;in tensorleri CPU, GPU ve dağıtılmış bulut mimarileri üzerinde asenkron hesaplamaları desteklerken, Numpy sadece CPU hesaplamasını destekler. İkinci olarak MXNet&#39;in tensorleri otomatik türevi destekler. Bu özellikler derin öğrenme için MXNet&#39;in tensorlerini uygun hale getirir. Bu kitap boyunca tensorler dediğimizde aksini ifade etmedikçe MXNet&#39;in ndarray örneklerinden söz ediyoruz. . Ba&#351;lang&#305;&#231; . Bu bölümde, bu kitabın başından sonuna kadar ilerledikçe inşa edeceğiniz temel matematik ve sayısal hesaplama araçları ile sizi hazırlamak ve çalıştırmayı amaçlıyoruz. Matematik kavramlarının veya kütüphane fonksiyonlarının bazılarını anlamaya çalışıyorsanız eğer endişelenmeyin. Aşağıdaki bölümler pratik örnekler ile birlikte bu materyali yeniden ele alacaktır. Diğer yandan eğer biraz geçmişiniz varsa ve matematiksel içeriğin daha derinine inmek istiyorsanız, bu bölümü geçebilirsiniz. . Başlamak için MXNet&#39;den np(numpy) ve npx(numpy_extension) modüllerini yükleyelim. Burada npx modülü Numpy gibi bir ortamda derin öğrenmeyi güçlendirmek için geliştirilmiş bir genişleme kümesi içerirken, np modülü Numpy tarafından desteklenen fonksiyonları içermektedir. Tensorleri kullanırken her zaman set_np() fonksiyonunu çağırırız. Bu MXNet&#39;in diğer bileşenleri ile tensor işleme uyumu içindir. . pip install mxnet==1.6.0 #Öncelikle MXNet&#39;i indiriyoruz. . from mxnet import np, npx npx.set_np() . Bir tensor sayısal değerlere sahip bir dizi(muhtemelen çok boyutlu) temsil eder. Matematikte bir eksenli tensor bir vektöre karşılık gelir. İki eksenli bir tensor ise matrise karşılık gelir. İkiden fazla eksenli diziler matematiksel olarak bir isme sahip değildir. Biz bunlara tensor diyoruz. . Varsayılan değeri float olarak oluşturmasına rağmen, 0 ile başlayan ilk 12 tam sayıyı içeren bir satır vektörü olan x&#39;i oluşturmak için &#39;arrange&#39; fonksiyonunu kullanabiliriz. Bir tensordeki değerlerin hepsi tensorün bir elemanı olarak adlandırılır. Örneğin, x tensoründe 12 eleman vardır. Aksi belirtilmediği sürece yeni bir tensor ana hafızada depolanacak ve CPU tabanlı hesaplama için tasarlanacak. . x = np.arange(12) x . Bir tensorün satır ve sutün sayısını öğrenmek için shape özelliğini kullanabiliriz. . x.shape . Sadece bir tensorün elemenlarının toplam sayısını bilmek istersek, size özelliğini kullanabiliriz. Burada bir vektörle uğraştığımız için shape fonksiyonunun değeri ile size fonksiyonunun değeri aynı sayıyı döndürür. . x.size . Bir tensorün eleman sayısını veya değerini değiştirmeden shape&#39;ini değiştirmek için reshape fonksiyonunu kullanabiliriz. Örneğin, (12,) shape sahip x vektörünü, (3,4) shape li bir matrise dönüştürebiliriz. Bu yeni tensör tamamen aynı değerleri içerir. Ancak 3 satır ve 4 sütun olarak düzenlenmiş bir matris olarak görünürler. Yani tensörün shape i değişmesine rağmen içindeki değerler değişmez. Boyutun yeniden şekillendirilerek değiştirilmediğine dikkat edin. . x.reshape(3,4) . Her boyutu manuel olarak belirterek yeniden şekillendirmeye gerek yoktur. Hedef şeklimiz (yükseklik,genişlik) olan bir matris ise genişliği bildikten sonra yükseklik kapalı bir şekilde verilir. Neden bölmeyi kendimiz yapmak zorundayız? Yukarıdaki örnekte 3 satırlık bir martis almak için hem 3 satır hemde 4 sütunlu olması gerektiğini belirttik. Neyse ki tensörler satır sayısı verildiğinde sütun sayısını,sütun sayısı verildiğinde de satır sayısını hesaplayabilir. Bunu, tensörün otomatik olarak çıkarım yapmasını istediğimiz boyutu -1 ile değiştirerek sağlıyoruz. Yani, x.reshape(3,4) olarak şekillendirmek yerine x.reshape(3,-1) veya x.reshape(-1,4) olarak yeniden şekillendirebiliriz. Hepsinde de sonuç aynıdır. empty metodu bir yığın hafızayı tutar ve bize girdilerinin herhangi birinin değerini değiştirmek için uğraşmadan bir matris geri verir. . np.empty((3,4)) . Tipik olarak, biz ya sıfırlar, birler, bazı diğer sabitler ya da belirli bir dağılımdan rasgele örneklenmiş sayılar ile başlatılmış matrisler isteyeceğiz. Tüm elemanları 0 ve (2,3,4) şeklindeki bir tensörü temsil eden bir tensörü aşağıdaki gibi oluşturabiliriz: . np.zeros((2,3,4)) . Benzer şekilde, her elemanı 1 olan tensörleri aşağıdaki gibi oluşturabiliriz: . np.ones((2,3,4)) . Çoğunlukla, bazı olasılık dağılımlarından bir tensördeki her elemanın değerini rasgele örneklemek isteriz. Örneğin, bir sinir ağındaki parametreler olarak kullanılacak dizileri oluşturduğumuzda, parametrelerin değerlerini alışıla geldik bir şekilde rasgele oluşturacağız. Aşağıdaki kod parçasında (3,4) şekle sahip bir tensör oluşur. Tensörün her elemanı ortalaması 0 ve standart sapması 1 olan Gaussian(normal) dağılım dan rasgele örneklenmiştir. . np.random.normal(0, 1, size= (3,4)) . Sayısal değerler içeren bir Python listesi veya listeleri oluşturarak istenen tensördeki her eleman için kesin değerleri de belirtebiliriz. Burada en dıştaki liste 0 eksenine, içteki liste ise 1 eksenine karşılık gelir. . np.array([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]]) . &#304;&#351;lemler .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/08/10/_06_13_veri_yonetimi.html",
            "relUrl": "/jupyter/2020/08/10/_06_13_veri_yonetimi.html",
            "date": " • Aug 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Lineer Regresyon (✗)",
            "content": "Linear Regression . Regresyon, bir veya daha fazla bağımsız değişkenle bir bağımlı değişkenin ilişkisini modelleyen metodlara verilen genel isimdir. Doğa bilimlerinde ve sosyal bilimlerde regresyonun amacı genellikle girdiler ve çıktılar arasındaki bağı karakterize etmektir. Buna karşın Makine Öğrenmesi ise çoğunlukla tahmin ile ilgilidir. . Ne zaman sayısal bir değeri tahmin etmek istesek regresyon karşımıza çıkar. Yaygın örnekler arasında fiyat tahmini (ev, hisse senedi gibi), bir yerde kalma süresinin tahmini (hastanede kalma süresi gibi), arz tahmini (emlak satışları için) vardır. Her tahmin problemi regresyon problemi değildir. İleriki bölümlerde sınıflandırma problemlerini inceleyeceğiz. Sınıflandırmada amaç kategoriler arasından doğru olanı tahmin etmedir, dolayısıyla regresyon problemi değildir. . Lineer Regresyonun Temel &#214;geleri . Lineer regresyon, standart regresyon araçları arasında hem en popüler hem de en basit olanıdır. Geçmişi 19. Yüzyıla dayanan lineer regresyon basit bir kabülden yola çıkar. Öncelikle $ mathbf{x}$ bağımsız değişkenleri ile $y$ bağımlı değişkeninin lineer olarak bağlantılı olduğunu kabul ederiz. Yani $y$ değişkeni $ mathbf{x}$ vektörünün bileşenlerinin lineer birleşimi ile gözlem hatasınının toplamıdır. İkincisi, gözlem hatasının düzenli olduğunu kabul ederiz(özel olarak Gauss dağılımına sahiptir). . Amacımızı daha iyi ifade etmek için bir örnek kullanalım. Ev fiyatlarını alanına ve yaşına göre tahmin etmek istiyoruz. Bu kestirimi yapabilmek amacıyla uygulayacağımız model için fiyatını, alanını ve yaşını bildiğimiz satış verisine (data set) ihtiyacımız var. Makine Öğrenmesi terminolojisinde veriye eğitim seti (training set) ve bu kümenin elemanlarına (bu örnekte her bir satış oluyor) bir örnek ya da veri noktası denir. Bu örnekteki fiyat gibi tahmin etmeye çalıştığımız şeye etiket (label) ya da hedef (target) denir. Örneğimizdeki evin alanı ve yaşı gibi bağımsız değişkenlere özellikler (features) denir. . Veri kümemizdeki örneklerin sayısını $n$ ile gösteriyoruz. Veri örneklerini indekslemek için $i$ harfini kullanacağız. Dolayısyla $y^{(i)}$ etiketine karşılık gelen özellikler $ mathbf{x}^{(i)} = [x_1^{(i)}, x_2^{(i)}]^ top$ ile gösterilecektir. . Lineer Model . Lineerlik kabulü gereği hedef (fiyat), özelliklerin (alan ve yıl) lineer birleşimidir: . $$fiyat = w_{ textrm{alan}} cdot textrm{alan} + w_ textrm{yıl} cdot textrm{yıl} + b.$$ . Burada , $w_{ textrm{alan}}$ and $w_{ textrm{yıl}}$ katsayılarına ağırlıklar, $b$ sayısına yanlılık denir. Ağırlıklar her bir özelliğin (feature) tahminimiz üzerinde ne kadar etkili olduğunu, yanlılık terimi de tüm özellikler sıfır olduğunda tahmin edilen fiyatın kaç olduğunu belirler. Evin alanı veya yaşı sıfır olmaz ama yanlılık terimi modelimizin temsil yeterliliğinin kısıtlanmaması açısından önemlidir. . Amacımız, elimizdeki veri için $ mathbf{w}$ ağırlılarını ve $b$ yanlılığını uygun şekilde belirlemektir. Bu sayede modelimizin yaptığı tahminler ile veri kümesindeki gerçek değerler ortalama olarak örtüşmelidir. . Makine öğrenmesinde genellikle yüksek boyutlu veri kümeleri ile çalışılır, yani özelliklerin sayısı çok fazladır. Örneğin bir fotoğrafın her bir pikseli bir özellik olarak alınır. Dolayısıyla matrisler ve vektörler gibi Lineer Cebir araçlarını kullanmak daha yararlı olur. Her bir veri (girdi), $d$ özelliğe sahip ise $ hat{y}$ tahminimizi . $$ hat{y} = w_1 x_1 + ... + w_d x_d + b.$$ . şeklinde ifade ederiz. Tüm özellikleri $ mathbf{x} in mathbb{R}^d$ vektörünün bileşenleri ile, tüm ağırlıkları da $ mathbf{w} in mathbb{R}^d$ vektörünün bileşnleri ile gösterirsek, modelimizi . $$ hat{y} = mathbf{w}^ top mathbf{x} + b$$ . nokta çarpımıyla ifade etmiş oluruz. . Burada $ mathbf{x}$ vektörü bir tek veri örneğine karşılık gelen özellik vektörüdür. Veri kümesi $n$ örnekten oluşsun ve hepsini $ mathbf{X} in mathbb{R}^{n times d}$ matrisinde bir araya getirelim. Burada her bir $ mathbf{x}$ vektörü $ mathbf{X}$ matrisinin bir satırını oluşturmaktadır. $ mathbf{X}$ matrisine dizayn matrisi veya veri matrisi denir. . Özelliklerin bir araya getirilmesi ile oluşan $ mathbf{X}$ için $ hat{ mathbf{y}} in mathbb{R}^n$ tahminimiz matris-vektör çarımıyla . $${ hat{ mathbf{y}}} = mathbf{X} mathbf{w} + b,$$ . biçiminde ifade edilebilir. Burada $b$ vektörü aslında aynı $b$ sayısının $n$ defa yazılmasıyla oluşan vektördür. Python programlamadaki yayımlama (broadcasting) gibi. Lineer regresyonda amaç, $ mathbf{X}$ eğitim kümemizdeki özellikler ve karşılık gelen $ mathbf{y}$ etiketleri için, aynı dağılımdan gelen yeni bir örnek için tahmindeki hatayı beklenen değer olarak en az yapan $ mathbf{w}$ ve $b$ terimlerini bulmaktır. . $ mathbf{x}$ verildiğinde $y$ için en iyi tahmini veren modelin lineer olduğunu düşünsek de, her $1 leq i leq n$ için gerçek $y^{(i)}$ ile $ mathbf{w}^ top mathbf{x}^{(i)}+b$ tahmininin eşit olmasını bekleyemeyiz. Örneğin $ mathbf{X}$ özellikleri ve $ mathbf{y}$ etiketleri küçük ölçüm hataları yapılmış olabilir. Dolayısıyla, geri planda yatan ilişkinin lineer olduğundan emin olsak bile bu tür küçük hataları ifade eden bir gürültü (noise) terimini de dahil edeceğiz. . En iyi $ mathbf{w}$ and $b$ parametrelerini aramaya başlamadan önce iki şey yapmalıyız: (i) modelin kalitesini ölçen bir araç ve (ii) modelin kalitesini iyileştirmek için izlenecek yol. . Kay&#305;p Fonksiyonu (Loss Function) . Modelimizi veriye uydurmaya başlamadan önce uyum (fitness) için bir ölçeğe ihtiyacımız var. Kayıp fonksiyonu sayesinde gerçek ve tahmini değer arasındaki mesafeyi ölçeriz. Kayıp genellikle negatif olmayan bir sayıdır ve küçük olması istenir hatta mükemmel sonuç için sıfırdır. Regresyon problemlerinde en çok kullanılan kayıp fonksiyonu hataların karelerinin toplamıdır. Buna en küçük kareler hata fonksiyonu da denir. Eğer $i$ numaralı örneğimiz için tahminimiz $ hat{y}^{(i)}$ ve karşılık gelen doğru etiket $y^{(i)}$ ise, hatanın karesi . $$l^{(i)}( mathbf{w}, b) = frac{1}{2} left( hat{y}^{(i)} - y^{(i)} right)^2$$ . olur. . Burada $1/2$ katsayısı sonucu değiştirmez ama türev alındığında sadeleşeceği için işlem kolaylığı sağlar. Eğitim kümemiz hazır olarak verildiğinden bizim kontrolümüz dışındadır, dolayısıyla yukarıdaki deneysel hata (emprical losss) sadece model parametrelerinin fonksiyonudur. Anlatılanları somutlaştırmak adına bir boyutlu durum için regresyon problemini aşağıdaki grafikte gösterelim. . . Burada hataların kareleri alındığından büyük hatların kayıp fonksiyonunu çok fazla büyüteceğine dikkat edin. Tüm veri kümesi üzerinden modelin kalitesini ölçmek için hataların ortalamasını (ya da sadece toplamını) alırız: . $$L( mathbf{w}, b) = frac{1}{n} sum_{i=1}^n l^{(i)}( mathbf{w}, b) = frac{1}{n} sum_{i=1}^n frac{1}{2} left( mathbf{w}^ top mathbf{x}^{(i)} + b - y^{(i)} right)^2.$$ . Modeli eğitirken, parametrelerin ($ mathbf{w}^*, b^*$) toplam kayıbı en küçük yapmasını yani . $$ mathbf{w}^*, b^* = operatorname*{argmin}_{ mathbf{w}, b} L( mathbf{w}, b)$$ . istiyoruz. . Analitik &#199;&#246;z&#252;m . Lineer Regreyon az rastlanır ölçüde basit bir optimizasyon problemidir. Karşılaşacağımız birçok modelin aksine lineer regresyon analitik bir şekilde çözülür ve global optimum bulunur. İlk olarak $b$ yanlılık terimini $ mathbf{w}$ arametrelerine ekleyelelim buna karşılık dizayn matrisine $1$ sayılarından oluşan bir sütun ekleyelim. Bu durumda tahmin problemimiz $|| mathbf{y} - mathbf{X} mathbf{w}||^2$ ifadesini minimize etmeye dönüşür. Bu ikinci dereceden bir ifade olduğu için konvekstir ve problem dejenere(özelliklerimiz lineer olarak bağımsız) olmadığından bu ifade kesin konvekstir. . Dolayısıyla kayıp fonksiyonunun belirttiği yüzey üzerinde bir tek kritik nokta vardır, bu da global minimuma karşılık gelir. Kayıp fonksiyonunun $ mathbf{w}$ üzerinden türevini alıp sıfıra eşitlersek, . $$ mathbf{w}^* = ( mathbf X^ top mathbf X)^{-1} mathbf X^ top mathbf{y}$$ . analitik çözümünü elde ederiz. Analitik çözüm matematiksel analiz için yararlı olsa da matrisin tersini içerdiğinden pratikte kullanışsızdır. Derin öğrenmede bu şekilde analitik çözümler neredeyse hiç kullanılmaz. . Gradiyent Azal&#305;m (Gradient descent) . Modelimizi analitik olarak çözemediğimiz durumlarda ve kayıp yüzeyimiz yüksek boyutlu ve konveks olmasa bile pratikte modelimizi etkin bir biçimde eğitebiliriz. Hatta birçok iş için optimize edilmesi güç görünen bu modeller daha kolay eğitilebilirler ve daha kullanılışlı olurlar. . Neredeyse tüm Derin Öğrenme modellerinde optimizasyon için kullanılan kilit yöntem, hatayı azaltmak için parametrelerin kayıp fonksiyonunun azaldığı yönde güncellendiği itreratif yöntemdir. Bu algoritmaya gradiyent azalım denir. Konveks yüzeyler için global minimuma eninde sonunda ulaşılır fakat konveks olmayanlar için (genellikle yeterince iyi olan) bir yerel minimuma yönelir. . Gradiyent azalımı kullanırken kayıp fonksiyonunun verinin tamamı üzerinden türevini almak kaba bir yaklaşım olur çünkü bu veri kümesindeki her bir örnek için elde edilen kayıp değerlerinin ortalamasıdır. Her güncelleme adımında veri kümesinin tamamını tarayacağımızdan hesap çok uzun sürer. Genellikle her güncellemede verinin tamamı yerine örneklerden rastgele bir yığın (batch) alınır. Buna stokastik gradiyent azalım denir. . Her ötelemede (iteration) belli sayıda örnekten oluşan rastgele küçük bir $ mathcal{B}$ yığını seçilir. Daha sonra yığının ortalama kayıbının model parametrelerine göre türevi (gradiyenti) hesaplanır. Son olarak da gradiyent belli bir $ eta &gt; 0$ adım boyu ile çarpılıp güncel parametre değerinden çıkarılır. . Güncellemeyi matematiksel olarak şöyle ifade edebiliriz: . $$( mathbf{w},b) leftarrow ( mathbf{w},b) - frac{ eta}{| mathcal{B}|} sum_{i in mathcal{B}} partial_{( mathbf{w},b)} l^{(i)}( mathbf{w},b).$$ . Burada $ partial$ ile kısmi türev gösterilmektedir. Algoritmanın adımları: (i) parametreler için başlangıç değerleri seçmek, genellikle rastgele seçilir (ii) veriden her bir adım için rastgele yığınlar seçmek ve parametrleri negatif gradiyent doğrultusunda güncellemek olarak özetlenebilir. . İkinci dereceden kayıplar ve lineer fonksiyonlar için güncellemeyi açık olarak bulabiliriz. Burada $ mathbf{w}$ ve $ mathbf{x}$ vektörlerdir. $w_1, w_2, ldots, w_d$ bileşenlerini kullanmak yerine, vektör gösterimi matematiksel ifadeleri daha okunaklı yapar. Sonuç olarak güncelleme . $$ begin{aligned} mathbf{w} &amp; leftarrow mathbf{w} - frac{ eta}{| mathcal{B}|} sum_{i in mathcal{B}} partial_{ mathbf{w}} l^{(i)}( mathbf{w}, b) &amp;&amp; = mathbf{w} - frac{ eta}{| mathcal{B}|} sum_{i in mathcal{B}} mathbf{x}^{(i)} left( mathbf{w}^ top mathbf{x}^{(i)} + b - y^{(i)} right), b &amp; leftarrow b - frac{ eta}{| mathcal{B}|} sum_{i in mathcal{B}} partial_b l^{(i)}( mathbf{w}, b) &amp;&amp; = b - frac{ eta}{| mathcal{B}|} sum_{i in mathcal{B}} left( mathbf{w}^ top mathbf{x}^{(i)} + b - y^{(i)} right) end{aligned} $$biçiminde ifade edilebilir. Yukarıdaki eşitliklerde $| mathcal{B}|$ ile yığın boyutu (batch size) ve $ eta$ ile de öğrenme parametresi (learining rate) gösterilmektedir. Yığın boyutu ve öğrenme parametresini önceden belirlediğimizi, bunların öğrenilmediğini vurgulamak gerekir. Bu şekilde değiştirilebilen fakat öğrenme sırasında güncellenmeyen parametrelere hiperparametre denir. Hiperparametre ayarlama (hyerparameter tuning), bunların uygun biçimde seçilmesi işlemidir ve eğitim kümesi ile elde edilen sonuçların ayrı bir doğrulama kümesi (validation set) ile denenmesi sayesinde yapılabilir. . Belli sayıda güncellemeden sonra ya da belli şartlar sağlandığında eğitim (training) durdurulur. Sonra bulduğumuz parametreler kaydedilir. Bu parametreler gerçek parametrelerin tamin edilen değerleridir ve $ hat{ mathbf{w}}, hat{b}$ ile gösterilirler. Fonksiyonumuz tam olarak lineer olsa ve hiçbir ölçüm hatası olmasa bile elde ettiğimiz bu parametreler tam olarak doğru değildir çünkü algoritmamız sonlu sayıda adımda minimuma ulaşamaz. . Lineer regresyon, konveks öğrenme problemi olduğundan bir tek (global) minimumu vardır. Daha kamaşık derin ağlarda kayıp yüzeyi üzerinde birçok minimum vardır. Neyse ki derin öğrenmede uygulayıcılar eğitim kümesi üzerinde minimumu bulmada fazla zorlanmazlar ve bunun matematiksel temeli halen çok iyi bilinmemektedir. Daha zor olanı, daha önce kullanmadığımız örnekler üzerinde düşük kayıp değeri veren parametreler bulmaktır. Buna probleme genelleştirme denir. İleride bu konulara değineceğiz. . &#214;&#287;renilen Model ile Tahminler Yapma (Estimation) . Öğrenimliş bir $ hat{ mathbf{w}}^ top mathbf{x} + hat{b}$ lineer regresyon modeli ile eğitim kümemizde yer almayan örnekler için tahminde bulunabiliriz. Örneğin alanı $x_1$ ve yılı $x_2$ olan bir evin fiyatını tahmin edebiliriz. Özellikleri verilen hedefi tahmin etme işine kestirim (prediction) veya çıkarım (inference) denir. . İstatistikte genellikle çıkarım ile parametrelerin veri kullanılarak tahmini ifade edilir. Dolayısıyla karışıklığa yol açmaması için derin öğrenme için kestirim kullanılacaktır. . Vekt&#246;rle&#351;tirme H&#305;zland&#305;r&#305;r . Modeli eğitirken tüm küçük veri yığınlarını aynı anda işlemek isteriz. Bunu etkin bir şekilde yapmanın yolu, işlemleri vektörleştirmek ve Pythondaki işlem yükü fazla olan döngüler(for loop gibi) yazmak yerine hızlı lineer cebir kütüphanelerini kullanmaktır. . Vektörleştirmeye ihtiyacın daha iyi anlaşılması için vektörlerin toplamı için iki yöntem kullanalım. Önce $1$ rakamlarından oluşan $10000$ boyutlu vektörler alalım. İlk metod için Python&#39;da vektörün bileşenleri üzerinden for döngüsü oluşturacağız. İkincisinde ise sadece bir kez + işlemcisini kullanacağız. . !pip install -U mxnet-cu101mkl==1.6.0 # updating mxnet to at least v1.6 !pip install d2l==0.13.2 -f https://d2l.ai/whl.html # installing d2l . %matplotlib inline from d2l import mxnet as d2l import math from mxnet import np import time n = 10000 a = np.ones(n) b = np.ones(n) . Zaman açısından kıyaslamayı ileride de sık sık yapacağımızdan, bunun için d2l paketinde erişilmek üzere bir kronometre (timer) sınıfı tanımlayalım. . class Timer: #@save &quot;&quot;&quot;Record multiple running times.&quot;&quot;&quot; def __init__(self): self.times = [] self.start() def start(self): &quot;&quot;&quot;Start the timer.&quot;&quot;&quot; self.tik = time.time() def stop(self): &quot;&quot;&quot;Stop the timer and record the time in a list.&quot;&quot;&quot; self.times.append(time.time() - self.tik) return self.times[-1] def avg(self): &quot;&quot;&quot;Return the average time.&quot;&quot;&quot; return sum(self.times) / len(self.times) def sum(self): &quot;&quot;&quot;Return the sum of time.&quot;&quot;&quot; return sum(self.times) def cumsum(self): &quot;&quot;&quot;Return the accumulated times.&quot;&quot;&quot; return np.array(self.times).cumsum().tolist() . Şimdi işleri karşılaştırabiliriz. Önce for döngüsüyle bileşen bileşen toplama yapalım. . c = np.zeros(n) timer = Timer() for i in range(n): c[i] = a[i] + b[i] f&#39;{timer.stop():.5f} sec&#39; . &#39;4.18153 sec&#39; . Şimdi de mxnet.np (yukarıda çağırdık) yeniden tanımlanan + işlemcisini kullanalım. . timer.start() d = a + b f&#39;{timer.stop():.5f} sec&#39; . &#39;0.00025 sec&#39; . İkincisinin farklı şekilde hızlı olduğu görülüyor. Kodu vektörleştirmek genellikle hızda üstel olarak değişen azalmalar sağlar. Hatta, işlemleri hazır kütüphaneleri kullanarak yaptırdığımızdan hataların da azalmasını sağlamış oluruz. . Normal Da&#287;&#305;l&#305;m ve En K&#252;&#231;&#252;k Kareler Kay&#305;p Fonksiyonu . Şimdiden lineer regresyonu uygulayacak kadar bilgi edinmiş olsak bile, en küçük kareler kayıp fonksiyonunun neden gürültü ile ilgili kabulümüz ile uyumlu olduğunu bilmek yayarlı olacaktır. . Yukarıda $l(y, hat{y}) = frac{1}{2} (y - hat{y})^2$ olarak tanılmalan en küçük kareler kayıp fonksiyonunun yararlı özellikleri görüldü. Bunlardan birisi de türevinin $ partial_{ hat{y}} l(y, hat{y}) = ( hat{y} - y)$ şeklinde çok sade olmasıdır. . Lineer regresyonu Gauss 1975 yılında buldu. Gauss aynı zamanda normal dağılımı (Gauss dağılımı da denir) da keşfeden kişidir. Yani normal dağılımla lineer regresyon arasında babalarının aynı olması ötesinde de derin bağlar vardır. Şimdi ortalamsı (mean) $ mu$ and varyansı $ sigma^2$ olan normal dağılımın yoğunluk fonksiyonunun . $$p(z) = frac{1}{ sqrt{2 pi sigma^2}} exp left(- frac{1}{2 sigma^2} (z - mu)^2 right)$$ . olduğunu hatırlayalım. Aşağıda normal dağılımı hesalayan Python fonksiyonu veriliyor. . def normal(z, mu, sigma): p = 1 / math.sqrt(2 * math.pi * sigma**2) return p * np.exp(- 0.5 / sigma**2 * (z - mu)**2) . Bununla normal dağılımı görselleştirebiliriz. . # Using numpy again for visualizations. x = np.arange(-7, 7, 0.01) # Mean and variance pairs parameters = [(0, 1), (0, 2), (3, 1)] d2l.plot(x, [normal(x, mu, sigma) for mu, sigma in parameters], xlabel=&#39;z&#39;, ylabel=&#39;p(z)&#39;, figsize=(4.5, 2.5), legend=[&#39;ort %d, var %d&#39; % (mu, sigma) for mu, sigma in parameters]); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Görüldüğü gibi ortalamayı değiştirmek $x$ ekseninde kaymalara, yaryansı değiştirmek dağılımın genişlemesine veya daralmasına sebep oluyor. . Lineer regresyonda en küçük karelerin kullanımını açıklamak için, gözlemlerdeki hataların gürültülü olduğunu ve bu gürültünün normal dağılımdan geldiğini kabul edelim: . $$ epsilon sim mathcal{N}(0, sigma^2) text{ olmak üzere } y = mathbf{w}^ top mathbf{x} + b + epsilon.$$ . Dolayısıyla verilen bir $ mathbf{x}$ için özel bir $y$ görmenin olabililirlik (likelihood) fonksiyonunu . $$p(y| mathbf{x}) = frac{1}{ sqrt{2 pi sigma^2}} exp left(- frac{1}{2 sigma^2} (y - mathbf{w}^ top mathbf{x} - b)^2 right)$$ . şeklinde yazabiliriz. Buradan maksimum olabilirlik prensibine göre $b$ ve $ mathbf{w}$ parametrelerinin en iyi değerleri veri kümesinin olabilirliğini en büyük yapanlardır: . $$P(Y mid X) = prod_{i=1}^{n} p(y^{(i)}| mathbf{x}^{(i)}).$$ . Maksimum olabilirlik prensibine göre seçilen kestiricilere (estimators) maksimum olabilirlik kestiricileri (MLE) denir. Üstel fonksiyonların çarpımını maksimum yapmak yerine genellikle logaritması maksimum yaılır. Optimizasyonda alışkanlık olarak maksimum yerine minimum incelendiğinden olabilirlik fonksiyonunun negatifinin minimumunu arayacağız (NLL - Negative Log-Likelihood): $- log p( mathbf y| mathbf X)$. İşlem yapılırsa . $$- log p( mathbf y| mathbf X) = sum_{i=1}^n frac{1}{2} log(2 pi sigma^2) + frac{1}{2 sigma^2} left(y^{(i)} - mathbf{w}^ top mathbf{x}^{(i)} - b right)^2$$ . elde edilir. Şimdi yapacağımız son kabul $ sigma$ yani varyansın sabit olması. Dolayısıyla yukarıdaki eşitliğin sağ tarafındaki ilk terim ihmal edilebilir çünkü $ mathbf{w}$ veya $b$ ile bağımlı değildir. Maksimumu bulmak için türev alacağımız için türevi sıfır olacak birşeyi almadık. İkinci terim ise $ frac{1}{ sigma^2}$ katsayısı hariç hataların kareleri toplamıdır. Neyse ki çözüm $ sigma$ varyansından bağımsızdır. Sonuç olarak, hataların karelerinin toplamını minimize etmenin, Gauss dağılımından gelen gürültü eklenmiş lineer modelin maksimum olabilirlik çıkarımına denk olduğunu gösterdik. . L&#304;neer Regresyondan Derin A&#287;lara (Deep Networks) . Şu ana kadar sadece lineer fonksiyonlala çalıştık. Sinir ağları (neural networks) çok geniş bir model ailesini kapsar ama lineer modeli sinir ağları içerisinde tanımlamak iyi bir başlangıç olacaktır. Şimdi modelimizi katmak (layer) gösterimi ile ifade edelim. . Yapay Sinir A&#287;&#305; Diyagram&#305; . Derin Öğrenme uygulayıcıları modelin diyagramını çizerek görselleştirmek isterler. Aşağıda lineer modeli bir sinir ağı olarak gösteriyoruz. Burada sadece bağlantılar gösteriliyor, ağırlıkların değerleri verilmiyor. Görüldüğü gibi bu durumda her girdi (input) çıktıya (output) bağlı. . . Gafikte, hesaplanacak bir tek nöron veya düğüm (node) olduğundan, lineer modeli tek sinir hücreli (neuron) yapay (artificial) sinir ağı olarak görürüz. Girdiler hazır verildiği için hesaplanmaz. Bu modelde her girdi çıktıya bağlı olduğundan bu dönüşüme tam bağlantılı katman (fully-connected layer) veya yoğun katman (dense layer) denir. Bu tür katmanları daha sonra ayrıntılı inceleyeceğiz. . Biyoloji . Lineer regresyon (1795) hesaplamalı yapay sinir ağlarından daha eski olsa da lineer regresyonu sinir ağlarının kronolojisine yerleştirmek doğru olmaz. Lineer modellerin yaay sinir ağlarına başlangıç için neden iyi oldğunu görmek için sibernetik/nöroeurofizyoloji uzmanı Warren McCulloch ve Walter Pitts tarafından yaay sinir ağlarının nasıl geliştirildiğine bakalım. Aşağıdaki resimde girdi terminali (dendrites), işlemci (nucleus), çıkış kablosu (axon) ve çıkış terminali (axon terminals) ve diğer nöronlara bağlantıyı sinapsis ile sağlayan bağlantılar vardır. . . Diğer nöronlardan veya retina gibi algılayıcılardan gelen $x_i$ bilgisi dentrit tarafından alınır. Bu bilgilerin yani girdilerin etki dereceleri $w_i$ sinatik ağırlıklar sayeinde belirlenir ve $x_i w_i$ çarpımları elde edilir. Farklı algılayıcılardan gelen bu ağırlıklı girdiler nükleusta bir araya getirilerek $y = sum_i x_i w_i + b$ toplamı oluşturulur. Sonra işlemden geçirilmek üzere aksona gönderilir ve lineer olmayan $ sigma(y)$ işlemi uygulanır. Buradan ya kas gibi hedefe ya da diğer bir nörona aktarılır. . Bu şekilde bir çok birimin doğru biçimde bağlanarak ve doğru öğrenme algoritması ile çok karmaşı davranışlar sergileceyeceği fikri nöronların biyolojik inclenenmesi sonucu elde edilmiştir. . Derin Öğrenme araştırmalarının önemli kısmı nörolojiden (neuroscience) az da olsa etkilenmiştir. Artificial Intelligence: A Modern Approach kitabında Stuart Russell ve Peter Norvig, uçaklar kuşlardan ilham alsa da, kuş bilimi havacılığı yönledirmemiştir demektedir. Benzer şekilde, Derin Öğrenme alanındaki gelişmeler nörolojiden çok matematik, istatistik ve bilgisayar bilimleri kaynaklıdır. . &#214;zet . Makine Öğrenmesi modelinin önemli bileşenleri; eğitim kümesi, kayıp fonksiyonu, optimizasyon algoritması ve tabii ki en önemlisi modelin kendisidir. | Vektörleştirme sayesinde işlemler de hesalamalar da hem sade hem de daha hızlı olur. | Amaç fonksiyonunu en küçük yamak ile maksimum olabilirliği uygulamak aynı anlama gelebilir. | Lineer modeller de sinir ağlarıdır. | . Al&#305;&#351;t&#305;rmalar . Elimizde $x_1, ldots, x_n in mathbb{R}$ mevcut. Amacımız $ sum_i (x_i - b)^2$ ifadesini en küçük yaan $b$ sabitini bulmak. En iyi $b$ değerini veren çözümü analitik olarak elde edin. | Bu problemin ve çözümünün normal dağılım ile ilgisi nedir? | . | En küçük kareler kayıp fonksiyonu için lineer regresyonun analitik çözümünü elde edin. Sadelik açısından $b$ terimini ihmal edebilirsiniz ($X$ matirsinin sonuna birlerden oluşan bir sütun ekleyerek bunu yapabilirsiniz). Optimizasyon problemini matris ve vektör gösterimi ile ifade edin. | Kayıp fonksiyonunun $w$ cinsinden gradiyentini bulun. | Gradiyenti sıfıra eşitleyip çözümü yanlız bırakın. | Stokastik gradiyent azalım ile analitik çözümün birbirine göre avantajlarını açıklayın. | . | Eklediğimiz $ epsilon$ gürültü (hata) teriminin üstel dağılımla modellenmiş olsun. Yani $p( epsilon) = frac{1}{2} exp(-| epsilon|)$ dağılımı. Verinin modele göre $- log P(Y mid X)$ negatig log-olabilirliğini bulun. | Çözüm analitik olarak bulunabilir mi? | Bu problemin çözümü için stokastik gradiyent azalım algoritması belirleyin. Ne gibi sorunlar çıkabilir? Mesela çözüme çok yaklaştığımızda ne olabilir? Bu sorunu nasıl düzeltiriz? | . | Discussions .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/25/Linear-Regresyon.html",
            "relUrl": "/jupyter/2020/02/25/Linear-Regresyon.html",
            "date": " • Feb 25, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Lineer Regresyon Uygulaması (✗)",
            "content": "The following additional libraries are needed to run this notebook. Note that running on Colab is experimental, please report a Github issue if you have any problem. . !pip install -U mxnet-cu101mkl==1.6.0 # updating mxnet to at least v1.6 !pip install d2l==0.13.2 -f https://d2l.ai/whl.html # installing d2l . Linear Regression Implementation from Scratch . :label:sec_linear_scratch . Now that you understand the key ideas behind linear regression, we can begin to work through a hands-on implementation in code. In this section, we will implement the entire method from scratch, including the data pipeline, the model, the loss function, and the gradient descent optimizer. While modern deep learning frameworks can automate nearly all of this work, implementing things from scratch is the only to make sure that you really know what you are doing. Moreover, when it comes time to customize models, defining our own layers, loss functions, etc., understanding how things work under the hood will prove handy. In this section, we will rely only on tensors and auto differentiation. Afterwards, we will introduce a more compact implementation, taking advantage of framework&#39;s bells and whistles. To start off, we import the few required packages. . %matplotlib inline from d2l import mxnet as d2l from mxnet import autograd, np, npx import random npx.set_np() . Generating the Dataset . To keep things simple, we will construct an artificial dataset according to a linear model with additive noise. Out task will be to recover this model&#39;s parameters using the finite set of examples contained in our dataset. We will keep the data low-dimensional so we can visualize it easily. In the following code snippet, we generated a dataset containing $1000$ examples, each consisting of $2$ features sampled from a standard normal distribution. Thus our synthetic dataset will be an object $ mathbf{X} in mathbb{R}^{1000 times 2}$. . The true parameters generating our data will be $ mathbf{w} = [2, -3.4]^ top$ and $b = 4.2$ and our synthetic labels will be assigned according to the following linear model with noise term $ epsilon$: . $$ mathbf{y}= mathbf{X} mathbf{w} + b + mathbf epsilon.$$ . You could think of $ epsilon$ as capturing potential measurement errors on the features and labels. We will assume that the standard assumptions hold and thus that $ epsilon$ obeys a normal distribution with mean of $0$. To make our problem easy, we will set its standard deviation to $0.01$. The following code generates our synthetic dataset: . def synthetic_data(w, b, num_examples): #@save &quot;&quot;&quot;Generate y = X w + b + noise.&quot;&quot;&quot; X = np.random.normal(0, 1, (num_examples, len(w))) y = np.dot(X, w) + b y += np.random.normal(0, 0.01, y.shape) return X, y true_w = np.array([2, -3.4]) true_b = 4.2 features, labels = synthetic_data(true_w, true_b, 1000) . Note that each row in features consists of a 2-dimensional data point and that each row in labels consists of a 1-dimensional target value (a scalar). . print(&#39;features:&#39;, features[0],&#39; nlabel:&#39;, labels[0]) . features: [2.2122064 1.1630787] label: 4.662078 . By generating a scatter plot using the second feature features[:, 1] and labels, we can clearly observe the linear correlation between the two. . d2l.set_figsize((3.5, 2.5)) d2l.plt.scatter(features[:, 1].asnumpy(), labels.asnumpy(), 1); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Reading the Dataset . Recall that training models consists of making multiple passes over the dataset, grabbing one minibatch of examples at a time, and using them to update our model. Since this process is so fundamental to training machine learning algorithms, its worth defining a utility function to shuffle the data and access it in minibatches. . In the following code, we define a data_iter function to demonstrate one possible implementation of this functionality. The function takes a batch size, a design matrix, and a vector of labels, yielding minibatches of size batch_size. Each minibatch consists of a tuple of features and labels. . def data_iter(batch_size, features, labels): num_examples = len(features) indices = list(range(num_examples)) # The examples are read at random, in no particular order random.shuffle(indices) for i in range(0, num_examples, batch_size): batch_indices = np.array( indices[i: min(i + batch_size, num_examples)]) yield features[batch_indices], labels[batch_indices] . In general, note that we want to use reasonably sized minibatches to take advantage of the GPU hardware, which excels at parallelizing operations. Because each example can be fed through our models in parallel and the gradient of the loss function for each example can also be taken in parallel, GPUs allow us to process hundreds of examples in scarcely more time than it might take to process just a single example. . To build some intuition, let us read and print the first small batch of data examples. The shape of the features in each minibatch tells us both the minibatch size and the number of input features. Likewise, our minibatch of labels will have a shape given by batch_size. . batch_size = 10 for X, y in data_iter(batch_size, features, labels): print(X, &#39; n&#39;, y) break . [[-0.22913499 -1.4747815 ] [-2.298264 0.10911477] [ 1.8687551 0.05255232] [-1.8077929 -0.44989827] [-0.37867823 -0.8062544 ] [ 1.1116904 0.10874183] [ 1.2040559 1.3111951 ] [ 1.4859676 -1.6136234 ] [ 0.7907037 -0.07465859] [ 0.24154152 -0.79218465]] [ 8.782716 -0.75900215 7.7884192 2.1199474 6.1864944 6.066374 2.1485395 12.633882 6.0255065 7.386261 ] . As we run the iterator, we obtain distinct minibatches successively until all the data has been exhausted (try this). While the iterator implemented above is good for didactic purposes, it is inefficient in ways that might get us in trouble on real problems. For example, it requires that we load all data in memory and that we perform lots of random memory access. The built-in iterators implemented in Apache MXNet are considerably more efficient and they can deal both with data stored in file and data fed via a data stream. . Initializing Model Parameters . Before we can begin optimizing our model&#39;s parameters by gradient descent, we need to have some parameters in the first place. In the following code, we initialize weights by sampling random numbers from a normal distribution with mean 0 and a standard deviation of $0.01$, setting the bias $b$ to $0$. . w = np.random.normal(0, 0.01, (2, 1)) b = np.zeros(1) w.attach_grad() b.attach_grad() . After initialized our parameters, our next task is to update them until they fit our data sufficiently well. Each update requires taking the gradient (a multi-dimensional derivative) of our loss function with respect to the parameters. Given this gradient, we can update each parameter in the direction that reduces the loss. . Since nobody wants to compute gradients explicitly (this is tedious and error prone), we use automatic differentiation to compute the gradient. See :numref:sec_autograd for more details. Recall from the autograd chapter that in order for the system to know that it should store a gradient for our parameters, we specified to attach gradients to both $w$ and $b$ on the above codes. . Defining the Model . Next, we must define our model, relating its inputs and parameters to its outputs. Recall that to calculate the output of the linear model, we simply take the matrix-vector dot product of the examples $ mathbf{X}$ and the models weights $w$, and add the offset $b$ to each example. Note that below $Xw$ is a vector and $b$ is a scalar. Recall that when we add a vector and a scalar, the scalar is added to each component of the vector. . def linreg(X, w, b): #@save return np.dot(X, w) + b . Defining the Loss Function . Since updating our model requires taking the gradient of our loss function, we ought to define the loss function first. Here we will use the squared loss function as described in the previous section. In the implementation, we need to transform the true value y into the predicted value&#39;s shape y_hat. The result returned by the following function will also be the same as the y_hat shape. . def squared_loss(y_hat, y): #@save return (y_hat - y.reshape(y_hat.shape)) ** 2 / 2 . Defining the Optimization Algorithm . As we discussed in the previous section, linear regression has a closed-form solution. However, this is not a book about linear regression, it is a book about deep learning. Since none of the other models that this book introduces can be solved analytically, we will take this opportunity to introduce your first working example of stochastic gradient descent (SGD). . At each step, using one batch randomly drawn from our dataset, we will estimate the gradient of the loss with respect to our parameters. Next, we will update our parameters (a small amount) in the direction that reduces the loss. Recall from :numref:sec_autograd that after we call backward each parameter (param) will have its gradient stored in param.grad. The following code applies the SGD update, given a set of parameters, a learning rate, and a batch size. The size of the update step is determined by the learning rate lr. Because our loss is calculated as a sum over the batch of examples, we normalize our step size by the batch size (batch_size), so that the magnitude of a typical step size does not depend heavily on our choice of the batch size. . def sgd(params, lr, batch_size): #@save for param in params: param[:] = param - lr * param.grad / batch_size . Training . Now that we have all of the parts in place, we are ready to implement the main training loop. It is crucial that you understand this code because you will see nearly identical training loops over and over again throughout your career in deep learning. . In each iteration, we will grab minibatches of models, first passing them through our model to obtain a set of predictions. After calculating the loss, we call the backward function to initiate the backwards pass through the network, storing the gradients with respect to each parameter in its corresponding .grad attribute. Finally, we will call the optimization algorithm sgd to update the model parameters. Since we previously set the batch size batch_size to $10$, the loss shape l for each minibatch is ($10$, $1$). . In summary, we will execute the following loop: . Initialize parameters $( mathbf{w}, b)$ | Repeat until done Compute gradient $ mathbf{g} leftarrow partial_{( mathbf{w},b)} frac{1}{ mathcal{B}} sum_{i in mathcal{B}} l( mathbf{x}^i, y^i, mathbf{w}, b)$ | Update parameters $( mathbf{w}, b) leftarrow ( mathbf{w}, b) - eta mathbf{g}$ | . | . In the code below, l is a vector of the losses for each example in the minibatch. Because l is not a scalar variable, running l.backward() adds together the elements in l to obtain the new variable and then calculates the gradient. . In each epoch (a pass through the data), we will iterate through the entire dataset (using the data_iter function) once passing through every examples in the training dataset (assuming the number of examples is divisible by the batch size). The number of epochs num_epochs and the learning rate lr are both hyper-parameters, which we set here to $3$ and $0.03$, respectively. Unfortunately, setting hyper-parameters is tricky and requires some adjustment by trial and error. We elide these details for now but revise them later in :numref:chap_optimization. . lr = 0.03 # Learning rate num_epochs = 3 # Number of iterations net = linreg # Our fancy linear model loss = squared_loss # 0.5 (y-y&#39;)^2 for epoch in range(num_epochs): # Assuming the number of examples can be divided by the batch size, all # the examples in the training dataset are used once in one epoch # iteration. The features and tags of minibatch examples are given by X # and y respectively for X, y in data_iter(batch_size, features, labels): with autograd.record(): l = loss(net(X, w, b), y) # Minibatch loss in X and y l.backward() # Compute gradient on l with respect to [w, b] sgd([w, b], lr, batch_size) # Update parameters using their gradient train_l = loss(net(features, w, b), labels) print(f&#39;epoch {epoch+1}, loss {float(train_l.mean())}&#39;) . epoch 1, loss 0.025012101978063583 epoch 2, loss 8.948738104663789e-05 epoch 3, loss 5.136155232321471e-05 . In this case, because we synthesized the data ourselves, we know precisely what the true parameters are. Thus, we can evaluate our success in training by comparing the true parameters with those that we learned through our training loop. Indeed they turn out to be very close to each other. . print(&#39;Error in estimating w&#39;, true_w - w.reshape(true_w.shape)) print(&#39;Error in estimating b&#39;, true_b - b) . Error in estimating w [0.00073254 0.00015283] Error in estimating b [0.00083923] . Note that we should not take it for granted that we are able to recover the parameters accurately. This only happens for a special category problems: strongly convex optimization problems with &quot;enough&quot; data to ensure that the noisy samples allow us to recover the underlying dependency. In most cases this is not the case. In fact, the parameters of a deep network are rarely the same (or even close) between two different runs, unless all conditions are identical, including the order in which the data is traversed. However, in machine learning, we are typically less concerned with recovering true underlying parameters, and more concerned with parameters that lead to accurate prediction. Fortunately, even on difficult optimization problems, stochastic gradient descent can often find remarkably good solutions, owing partly to the fact that, for deep networks, there exist many configurations of the parameters that lead to accurate prediction. . Summary . We saw how a deep network can be implemented and optimized from scratch, using just tensors and auto differentiation, without any need for defining layers, fancy optimizers, etc. This only scratches the surface of what is possible. In the following sections, we will describe additional models based on the concepts that we have just introduced and learn how to implement them more concisely. . Exercises . What would happen if we were to initialize the weights $ mathbf{w} = 0$. Would the algorithm still work? | Assume that you are Georg Simon Ohm trying to come up with a model between voltage and current. Can you use auto differentiation to learn the parameters of your model. | Can you use Planck&#39;s Law to determine the temperature of an object using spectral energy density? | What are the problems you might encounter if you wanted to compute the second derivatives? How would you fix them? | Why is the reshape function needed in the squared_loss function? | Experiment using different learning rates to find out how fast the loss function value drops. | If the number of examples cannot be divided by the batch size, what happens to the data_iter function&#39;s behavior? | Discussions .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/24/Linear-Regresyon-Uygulama.html",
            "relUrl": "/jupyter/2020/02/24/Linear-Regresyon-Uygulama.html",
            "date": " • Feb 24, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Olasılık (✔)",
            "content": "Makine Öğrenmesi tamamen tahminler üretme işidir. Örneğin klinik geçmişi göz önüne alındığında, bir hastanın gelecek yıl kalp krizi geçirme olasılığını tahmin etmek isteyebiliriz. Anormallik tespitinde, bir uçağın jet motorundan gelen bir dizi okumanın normal çalışma için ne kadar olası olduğunu değerlendirmek isteyebiliriz. Pekiştirmeli öğrenmede, robotun ya da daha genel olarak etmenin bir ortamda akıllıca davranmasını isteriz. Bunun anlamı, mevcut eylemlerin her biri altında yüksek bir ödül alma olasılığını düşünmemiz gerektiğidir. Tavsiye sistemleri inşa ettiğimizde de olasılıkları düşünmemiz gerekir. Örneğin, büyük bir online kitapçı için çalıştığımızı varsayalım. Belirli bir kullanıcının belirli bir kitabı satın alma olasılığını tahmin etmek isteyebiliriz. Tüm bu durumlar için olasılık dilini kullanmalıyız. Bir çok kurs, ana bilim dalları, tezler, kariyerler ve hatta bölümler olasılık bilimi üzerine kurulmuştur. Doğal olarak, bu bölümdeki amacımız tüm olasılık konularını öğretmek değildir. Bunun yerine sıfırdan, size ilk derin öğrenme modellerinizi oluşturmaya başlayabileceğiniz kadar olasılık bilgisi öğretmeyi ve isterseniz konunun kendi kendinize keşfetmeye başlayabileceğiniz kadarlık özünü kavratmak istiyoruz. . Açık açık ifade etmesek veya somut örnekler vermesek de, önceki bölümlerde olaslığı kullandık. Şimdi ilk örneğimizle başlayaşım: kedi ve köpekleri fotoğraflardan ayırt etmek. Bu basit gelebilir ama aslında zor bir problemdir. Sorunun zorluğu ilk planda görüntünün çözünürlüğüne bağlı olabilir. . . Değişken çözünürlükteki resimler (10x10, 20x20, 40x40, 80x80 ve 160x160 piksel) . Şekilde görüldüğü gibi, $160 times 160$ piksel çözünürlüğe sahip resimlerde kedi ve köpekleri seçmek bizim için kolay olsa da, $40 times 40$ piksel için zor hata $10 times 10$ piksel için imkansızdır. Diğer bir ifadeyle, uzaklaştıkça yani çözünürlük azaldıkça kedi ve köpek resimlerini ayırt etmemiz yazı-tura atmaya dönüşmeye başlar. Olasılık sayesinde belirsizlik düzeyini matematiksel olarak ifade edebiliriz. Eğer resmin kedi resmi olduğundan tam olarak eminsek, resme karşılık gelen $y$ etiketinin &quot;kedi&quot; olma olasılığı yani $P(y=$ &quot;kedi&quot;$)$ ifadesi $1$ sayısına eşittir deriz. Fakat $y =$ &quot;kedi&quot; veya that $y =$ &quot;köpek&quot; diyebilmek için herhangi bir bulgu yok ise, olasılıkların eşit olduğunu söyler ve bunu $P(y=$ &quot;kedi&quot;$) = P(y=$ &quot;köpek&quot;$) = 0.5$ şeklinde gösteririz. Eğer resmin kedi resmi olduğu yüksek ihtimal ise fakat kesin emin değilsek, olasılığı $0.5 &lt; P(y=$ &quot;kedi&quot;$) &lt; 1$ gibi bir değer olarak tahmin ederiz. . Şimdi diğer bir örnek verelim. Hava durumu izleme verilerinden yarın İstanbul&#39;da yağmur yağma olaslığını tahmin etmek istiyoruz. Yaz aylarındaysak yağmur yaklaşık 0.5 olasılıkla yağar. . İki örnekte de bir şeyin alacağı değerle ilgileniyoruz. Ayrıca ikisinde de sonuçtan kesin emin değiliz. Fakat iki durum arasında kritik bir farklılık var. İlk durumda resim ya kedidir ya da köpektir ve hangisi olduğunu kesin bilmiyoruz. İkinci durumda sonuç rastgele bir olay gibi görülebilir. Dolayısıyla olasılık, belirsizliğin esnek dilidir ve birçok farklı durumda etkin bir şekilde kullanılabilir. . Temel Olas&#305;l&#305;k Kuram&#305; . Bir zar atalım ve gelen sayının 1 rakamı olma ihtimalini hesaplayalım. Eğer düzgün bir zar ise, 1&#39;den 6&#39;ya kadar olan tüm sonuçlar aynı şansa sahiptir ve dolayısıyla altıda bir oranında 1 rakamı gelir. Daha matematiksel olarak, 1 gelme olasılığının $ frac{1}{6}$ olduğunu söyleriz. . Fabirakadan yeni çıkmış bir zarın düzgün mü değil mi olduğunu öğrenmek isteyebiliriz. Bunu öğrenmenin tek yolu zarı defalarca atmak ve sonuçları kaydetmektir. Her atışta 1 ile 6 arasında bir sonuç elde ederiz. Bu sonuçlardan her bir rakamın olasılığını bulalım. . En basit yol her bir rakamın kaç defa geldiğini saymak ve bunu toplam atış sayısına oranlamaktır. Bu süreç belirlediğimiz olay için (mesela 1 gelmesi olayı) olasığı tahmin etmemizi sağlar. İstatistikteki Büyük Sayılar Yasası gereği, daha çok zar attıkça elde ettiğimiz oranlar gerçek olasılığa doğru yaklaşır. Ayrıntıya girmeden önce bir deneme yapalım. . Önce gerekli olan kütüphaneleri yükleyelim. . !pip install d2l==0.13.2 -f https://d2l.ai/whl.html # installing d2l !pip install -U mxnet-cu101mkl==1.6.0 # updating mxnet to at least v1.6 . Şimdi de kullanacağımız araçları ve paket programları çağıralım. . %matplotlib inline from d2l import mxnet as d2l from mxnet import np, npx import random npx.set_np() . Şimdi zar atma işini programla yapmak istiyoruz. İstatistikte buna olasılık dağılımından örneklem alma denir. Belli sayıda seçeneğe karşılık gelen olasılıkları veren dağılıma çok terimli dağılım (multinomial distribution) denir. İleride dağılım kavramı daha net açıklanacaktır ama şimdilik bunu olaylara olasılık eşleme olarak düşünebilirsiniz. . MXNet ile çokterimli dağılımdan örneklem almak için np.random.multinomial fonksiyonunu kullanıyoruz. Bu fonksiyonu farklı şekillerde yükleyip kullanabilirsiniz, biz en kolayını tercih edeceğiz. . Öncelikle np.random.multinomial fonksiyonunun verdiği vektörü ele alalım. Bu vektörün bileşenleri, bu blieşene karşılık gelen sonucun kaç defa elde edildiğini gösterir. Mesela zar atmada, $6$ bileşenli bir vektör vardır ve ilk bileşen $1$ rakamının kaç defa geldiğini, benzer şekilde $i$ bileşeni $i$ sonucunun kaç defa geldiğini gösterir. . Zarı 1 defa atalım. . fair_probs = [1.0 / 6] * 6 np.random.multinomial(1, fair_probs) . array([0, 0, 0, 1, 0, 0], dtype=int64) . Bunu defalarca çalıştırırsanız her seferinde rastgele sonuçlar elde edersiniz. Zarın düzgün olup olmadığını anlamak için bu dağılımdan birçok örneklem almalıyız. Mesela 10 zar atmak için for döngüsü yerine aşağıdakini kullanırız ve birbirinden bağımsız 10 sonucu aynı anda elde etmiş oluruz. . np.random.multinomial(10, fair_probs) . array([1, 1, 5, 1, 1, 1], dtype=int64) . Ayrıca bu deneyi örneği aynı anda 3 defa yapabiliriz. . counts = np.random.multinomial(10, fair_probs, size=3) counts . array([[1, 2, 1, 2, 4, 0], [3, 2, 2, 1, 0, 2], [1, 2, 1, 3, 1, 2]], dtype=int64) . Şimdi zarı 1000 defa atalım ve herbir sonucun gelme oranının bulalım. Bu sayede olasılıkları tahmin etmiş olacağız. . # Sonuçları 32 bit boyutunda ondalıklı bilgisayar sayıları olarak kaydedelim. counts = np.random.multinomial(1000, fair_probs).astype(np.float32) counts / 1000 # Oranlar . array([0.164, 0.153, 0.181, 0.163, 0.163, 0.176]) . Düzgün bir zardan örneklem aldığımız için herbir sonucun gerçek olasılığının $ frac{1}{6}$ veya yaklaşık $0.167$ olduğunu biliyoruz. Dolayısıyla tahminimiz oldukça iyi görünüyor. . Bu tahminlerin örneklem boyutu ve sayısı arttıkça gerçek olasılığa nasıl yaklaştığını görselleştirelim. Örneklem boyutu 10 olan 500 deneyin sonuçlarının gerçek olasılığa nasıl yaklaştığını görelim. . counts = np.random.multinomial(10, fair_probs, size=500) cum_counts = counts.astype(np.float32).cumsum(axis=0) estimates = cum_counts / cum_counts.sum(axis=1, keepdims=True) d2l.set_figsize((6, 4.5)) for i in range(6): d2l.plt.plot(estimates[:, i].asnumpy(), label=(&quot;P(zar=&quot; + str(i + 1) + &quot;)&quot;)) d2l.plt.axhline(y=0.167, color=&#39;black&#39;, linestyle=&#39;dashed&#39;) d2l.plt.gca().set_xlabel(&#39;Deney sayısı&#39;) d2l.plt.gca().set_ylabel(&#39;Olasılık Tahmini&#39;) d2l.plt.legend(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Yukarıdaki şekilde sürekli eğriler zarın herbir yüzüne karşılık gelen olasılık tahmininin deney sayısına göre değişimini veriyor. Kesikli çizgi de gerçek olasılığı gösteriyor ve görüldüğü gibi sürekli eğriler buna doğru yaklaşıyor. . Olas&#305;l&#305;k Kuram&#305;n&#305;n Aksiyomlar&#305; . Zar atma ile ilgili çalışırken $ mathcal{S} = {1, 2, 3, 4, 5, 6 }$ kümesine öneklem uzayı, herbir elemana çıktı veya sonuç diyoruz. Bazı sonuçlardan oluşan bir kümeye olay denir. Örneğin $5$ gelmesi yani $ {5 }$ olayı veya tek sayı gelmesi yani $ {1, 3, 5 }$ olayı gibi. Eğer gözlem sonucu $ mathcal{A}$ kümesinde yer alıyorsa bu $ mathcal{A}$ olayı gerçeklşmiş olur. Mesala eğer zar $3$ gelmiş ise, tek sayı gelmesi olayı gerçekleşmiş olur çünkü $3 in {1, 3, 5 }$ sağlanır. . Matematiksel olarak olasılık, kümelere reel sayı karşılık getiren bir fonksiyon olarak tanımlanır. $ mathcal{S}$ örneklem uzayındaki bir $ mathcal{A}$ olayının olasılığı $P( mathcal{A})$ ile gösterilir ve aşağıdaki özellikleri sağlar. . Herhangi bir $ mathcal{A}$ olayının olasılığı negatif olamaz, yani $P( mathcal{A}) geq 0$; | Örneklem uzayının olasılığı $1$ olmalıdır, yani $P( mathcal{S}) = 1$; | Karşılıklı ayrık olan yani $i neq j$ için $ mathcal{A}_i cap mathcal{A}_j = emptyset$ biçimindeki sayılabilir çoklukta $ mathcal{A}_1, mathcal{A}_2, ldots$ olayları için herhangi birisinin gerçekleşmesi olasılığı olasılıklarının toplamına eşittir, yani $P( bigcup_{i=1}^{ infty} mathcal{A}_i) = sum_{i=1}^{ infty} P( mathcal{A}_i)$. | . Bunlara olasılık kuramının aksiyomları denir ve Kolmogorov tarafından 1930&#39;da tanımlanmıştır. Bu sağlam temeller sayesinde rastgelelik ile ilgili felsefi tartışmalardan kurtulup matematiksel araçlarla çalışabilir ve yeni sonuçlar elde edebiliriz. Mesela $ mathcal{A}_1$ olayını örneklem uzayının tamamı ve diğer her $i &gt; 1$ için $ mathcal{A}_i = emptyset$ olarak alırsak, $P( emptyset) = 0$ buluruz, yani boş kümenin olasılığı sıfırdır. . Rassal De&#287;i&#351;kenler . Zar atma deneyinde rassal değişken (random variable) kavramını kullandık. Rassal değişken herhangi bir tür çokluk olabilir ve belirgin (deterministic) değildir. Deneydeki mümkün olan tüm değerleri alabilir. Mesela $X$ rassal değişkeni zar atma deneyindeki $ mathcal{S} = {1, 2, 3, 4, 5, 6 }$ örneklem uzayında değerler alsın. Zarın $5$ gelmesi olayını $ {X = 5 }$ veya $X = 5$ şeklinde olasılığını da $P( {X = 5 })$ veya $P(X = 5)$ ile gösterebiliriz. $P(X = a)$ ile $X$ rassal değişkeni ve onun aldığı $a$ değerini ayrı ayrı belirtmiş oluyoruz. Ancak bu gösterim uzun olacağından, $P(X)$ ile $X$ rassal değişkeninin dağılımını (distribution), $P(a)$ ile de $a$ değerini alma olasılığını göstereceğiz. Benzer şekilde rassal değişkenin belli bir aralıkta değerler alma olasılığını da belirtebiliriz. Örneğin $P(1 leq X leq 3)$ ile $X$ rassal değişkeninin $ {1, 2, 3 }$ değerlerini alma ihtimalini gösteriyoruz. . Zarın üzerindeki rakamlar gibi ayrık rassal değişkenler ile bir insanın boyu gibi sürekli rassal değişkenler arasında önemli bir fark vardır. İki kişinin tam olarak aynı boyda olması pek mümkün değildir. Eğer çok hassas bir uzunluk ölçme aracımız olsaydı, dünyada her kişinin boyunun diğerlerinden farklı olduğunu görürdük. Dolayısıyla bir kişinin boyunun örneğin 1.80139278291028719210196740527486202 metre olma ihtimalini hiçbir zaman sorgulamayız. Dünya nüfusu alındığında bile bu ihtimal sıfırdır. Burada bir kişinin boyunun belirlenen bir aralıkta olma ihtimali anlamlı olur, mesela 1.79 ile 1.81 metre arası gibi. Böyle sürekli rassal değikenlerde herbir değerin yoğunluk (density) olarak olasığı değrlendirilir. Mesela 1.80 metrenin olasılığı sıfırdır ama yoğunluğu sıfırdan büyük bir sayıdır. Bir aralıkta olasılık ise sıfırdan farklı bir değer alabilir. Bu bölümde kesikli rassal değişkenler kullanılacaktır, sürekli rassal değikenlerin olasılığı için Rassal Değişkenler bölümüne bakınız. . Rassal De&#287;i&#351;kenlerin Birbiriyle &#304;li&#351;kileri . Genellikle birden fazla rassal değişkeni bir arada inceleriz. Örneğin Grip ile öksürük gibi belli bir hastalık ile bir belirtinin hastalarda ayrı ayrı ve bir arada görülmesi olasılıkları üzerinden ilişkileri incelenebilir. Bu sayede daha etkin tedavi için çıkarımlar yaılabilir. . Daha karmaşık bir örnek olarak milyonlarca pikselden oluşan resimleri ele alalım. Piksellerin renk değerleri birer rassal değişken olarak görülebilir. Ayrıca resimleri belirten etiketler, yer, konum gibi diğer veriler de birer rassal değişken olarak düşünülebilir. Tüm bu rassal değişkenler bir arada yer alır. Rassal değişkenlerin birbirlerine göre durumlarını incelerken birçok nicelik kullanırız, şimdi bunları görelim. . Ortak Olas&#305;l&#305;k (Joint Probability) . İlkine ortak olasılık denir ve $P(A = a, B=b)$ ile gösterilir. Belli $a$ ve $b$ değerleri için ortak olasılık bize aynı anda $A=a$ ve $B=b$ olması olasılığını verir. Burada her $a$ ve $b$ için $P(A=a, B=b) leq P(A=a)$ olur. Çünkü aynı anda $A=a$ ve $B=b$ olması için ayrı ayrı $A=a$ olmalı ve $B=b$ olmalıdır. Dolayısıyla herbirinin ayrı ayrı olması birlikte olmalarından daha muhtemeldir. . Ko&#351;ullu Olas&#305;l&#305;k (Conditional Probability) . Yukarıdaki eşitsizlikten dolayı $0 leq frac{P(A=a, B=b)}{P(A=a)} leq 1$ elde edilir. Bu orana koşullu olasılık denir ve $P(B=b mid A=a)$ ile gösterilir. Anlamı da, $A=a$ durumunda $B=b$ olması olasılığıdır. . Bayes Teoremi . Koşullu olasılık tanımını kullanarak İstatistiğin en önemli ve gerekli denklemlerinden birisi, yani Bayes Teoremi elde edilebilir. Şöyle ki, tanımdan çarpım kuralı yani $P(A, B) = P(B mid A) P(A)$ elde edilir. $P(A, B)=P(B, A)$ olduğundan aynı zamanda $P(A, B) = P(A mid B) P(B)$ yazılabilir. $P(B) &gt; 0$ kabul edilerek ve sadeleştirmeyle . $$P(A mid B) = frac{P(B mid A) P(A)}{P(B)}$$ . olur. Yukarıda $P(A, B)$ gösterimi ile belirtilen dağılıma ortak dağılım, $P(A mid B)$ ile gösterilen dağılıma da koşullu dağılım denir. Bu dağılımların özel olarak $A = a, B=b$ için değerleri hesaplanabilir. . Ay&#305;rma (Marginalization) . Bayes Teoremi bir şeyden diğeri için çıkarım yapmada çok yararlıdır. Neden-sonuç ilişkisi gibi durumlarda nasıl kullanılacağını sonraki bölümlerde göreceğiz. Bunun için ayırma işlemine ihtiyacımız var. Bu işlem ile $P(A, B)$ yardımıyla $P(B)$ elde edilmektedir. $B$ rassal değişkeninin olasılığı, $A$ rassal değişkeninin alabileceği her değer için ortak olasılıkların toplamıdır. Buna toplam kuralı denir ve . $$P(B) = sum_{A} P(A, B)$$ . biçiminde formülleştirilir. Ayırma sonucunda elde edilen olasılığa ya da bunun dağılımına marjinal olasılık ya da marjinal dağılım denir. . Ba&#287;&#305;ms&#305;zl&#305;k (Independence) . Rassal değişkenler arasında bakılan bir diğer özellik de bağımlılık ya da tersi bağımsızlık durumudur. $A$ ve $B$ gibi iki rassal değişkenin bağımsız olması, $B$ rassal değişkeninin aldığı değerlerin $A$ için herhangi bir bilgi ortaya koymaması olarak özetlenebilir. Bu durumda $P(B mid A) = P(B)$ olur. İstatistikçiler bağımsızlığı $A perp B$ ile gösterir. Bayes Toeremi gereği $P(A mid B) = P(A)$ elde edilir. Diğer hallerde $A$ ve $B$ bağımlıdır. Örneğin iki zarın arka arkaya atılması bağımsız rassal değişkenler verir. Bununla birlikte bir odadaki elektrik düğmesi ile odanın aydınlık olması bağımlıdır. (Elektrik düğmesinin açık olması aydınlık olacağını kesin gerektirmez çünkü düğme bozuk olabilir ya da elektrikler kesilebilir.) . $P(A mid B) = frac{P(A, B)}{P(B)} = P(A)$ eşitliğiyle $P(A, B) = P(A)P(B)$ eşitliği birbirine denk olduğundan, iki rassal değişkenin bağımsız olması ortak dağılımın bunların dağılımlarının çarpımına eşit olması ile aynı şeydir. Benzer şekilde $A$ ve $B$ rassal değişkenleri $C$ rassal değikenine göre koşullu bağımsızlık tanımı $P(A, B mid C) = P(A mid C)P(B mid C)$ olarak verilebilir ve $A perp B mid C$ biçiminde gösterilir. . Uygulamalar . Şimdi öğrendiklerimizi sınayalım. Bir doktor kendisine başvuran bir kişiye AIDS testi uyguluyor. Bu test oldukça güvenilir ve sağlam bir kişiyi AIDS hastası göstermesi olasılığı %1. Hatta HIV virüsü taşıyan bir kişiyi tesit etmede kesinlikle hata yapmıyor. $D_1$ ile teşhisi gösterirelim, yani pozitif teşhis için $1$, negatif teşhis için $0$ değerini alsın. $H$ ile de HIV virüsü taşımayı gösterelim, dolayısıyla HIV pozitif için $1$, HIV negatif için $0$ değeri alsın. Aşağıdaki tablo eldeki verileri özetler. . Koşullu Olasılık $H=1$ $H=0$ . $P(D_1 = 1 mid H)$ | 1 | 0.01 | . $P(D_1 = 0 mid H)$ | 0 | 0.99 | . Tablodaki sütunların toplamı 1 olmalıdır çünkü koşullu olasılık da bir olasılık dağılımıdır. Doktora başvuran kişinin testi pozitif çıkıyor, bu durumda kişinin AIDS olma olasılığını inceleyelim. Yani $P(H = 1 mid D_1 = 1)$ değerini hesaplamak istiyoruz. Bu oran hastalığın toplumda ne kadar yaygın olduğuna bağlıdır, çünkü yanlış alarm oranını buradan elde ederiz. Toplumun oldukça sağlıklı olduğunu örneğin $P(H=1) = 0.0015$ olduğunu kabul edelim. Bayes Teoremi&#39;ni uygulamadan önce ayırma ve çarım kuralı ile aşağıdaki hesabı yapalım: . $$ begin{aligned} &amp;P(D_1 = 1) =&amp; P(D_1=1, H=0) + P(D_1=1, H=1) =&amp; P(D_1=1 mid H=0) P(H=0) + P(D_1=1 mid H=1) P(H=1) =&amp; 0.011485. end{aligned} $$Dolayısıyla . $$ begin{aligned} &amp;P(H = 1 mid D_1 = 1) =&amp; frac{P(D_1=1 mid H=1) P(H=1)}{P(D_1=1)} =&amp; 0.1306 end{aligned}$$elde edilir. Diğer bir ifadeyle kişinin gerçekten AIDS olma olasılığı sadece %13.06 olarak bulunur. Test oldukça güvenilirdi ama oran düşük çıktı. Olasılık bazen sezgilere aykırı olabiliyor. . Kişi testi pozitif çıkınca ne yapmalıdır? Büyük ihtimalle farklı bir test daha uygulanacaktır. İkinci test biraz farklı özellikte ve birincisi kadar iyi değil. Tabloda özelliklerini görelim. . Koşullu Olasılık $H=1$ $H=0$ . $P(D_2 = 1 mid H)$ | 0.98 | 0.03 | . $P(D_2 = 0 mid H)$ | 0.02 | 0.97 | . Maalesef ikinci test sonucu da pozitif çıkıyor. İki testin koşullu olarak bağımsız olduğunu düşünerek Bayes Teoremi&#39;ni uygulayalım: . $$ begin{aligned} &amp;P(D_1 = 1, D_2 = 1 mid H = 0) =&amp; P(D_1 = 1 mid H = 0) P(D_2 = 1 mid H = 0) =&amp; 0.0003, end{aligned} $$$$ begin{aligned} &amp;P(D_1 = 1, D_2 = 1 mid H = 1) =&amp; P(D_1 = 1 mid H = 1) P(D_2 = 1 mid H = 1) =&amp; 0.98. end{aligned} $$Şimdi ayırma ve çarpım kuralını uygulayabiliriz: . $$ begin{aligned} &amp;P(D_1 = 1, D_2 = 1) =&amp; P(D_1 = 1, D_2 = 1, H = 0) + P(D_1 = 1, D_2 = 1, H = 1) =&amp; P(D_1 = 1, D_2 = 1 mid H = 0)P(H=0) + P(D_1 = 1, D_2 = 1 mid H = 1)P(H=1) =&amp; 0.00176955. end{aligned} $$Sonuç olarak kişinin AIDS olma olasılğı hesaplanırsa . $$ begin{aligned} &amp;P(H = 1 mid D_1 = 1, D_2 = 1) =&amp; frac{P(D_1 = 1, D_2 = 1 mid H=1) P(H=1)}{P(D_1 = 1, D_2 = 1)} =&amp; 0.8307 end{aligned} $$elde edilir. Yani ikinci test çok daha emin olmamızı sağladı. İkinci test birincisine göre oldukça az güvenilirdi ama tahminimizi önemli ölçüde geliştirdi. . Beklenen De&#287;er ve Varyans (Expectation and Variance) . Olasılık dağılımlarının belirgin özelliklerini özetlemek için bazı ölçümlere ihtiyaç vardır. Bir $X$ rassal değişkeni için beklenen değer (ya da ortalama), . $$E[X] = sum_{x} x P(X = x)$$ . şeklinde gösterilir ve tanımlanır. Eğer bir $f(x)$ fonksiyonunun girdileri $P$ dağılımına sahip bir rassal değişkenden geliyorsa bu fonksiyonun beklenen değeri . $$E_{x sim P}[f(x)] = sum_x f(x) P(x)$$ . olarak tanımlanır. . Genellikle $X$ rassal değişkeninin ortalamadan ne kadar saptığını bilmek isteriz. Bunu aşağıda tanımlanan varyans ile yaparız: . $$ mathrm{Var}[X] = E left[(X - E[X])^2 right] = E[X^2] - E[X]^2.$$Varyansın karekökü standart sapma olarak adlandırılır. Rassal değişkenin bir fonksiyonu için varyans benzer şekilde tanımlanır ve dağılımdan farklı $x$ örneklemleri alındığında fonksiyonun ortalamasından ne kadar saptığını gösterir: . $$ mathrm{Var}[f(x)] = E left[ left(f(x) - E[f(x)] right)^2 right].$$ . &#214;zet . Olasılık dağılımında örneklem alabiliriz. | Birçok rassal değişkeni ortak dağılım, koşullu dağılım, Bayes Kuralı, ayırma ve bağımsızlık kavramları yardımıyla bir arada analiz edebiliriz. | Ortalama ve varyans olasılık dağılımının belirgin özelliklerini özetlemek için yararlı araçlardır. | . Al&#305;&#351;t&#305;rmalar . Deneyimizde $n=10$ boyutunda örneklem için $m=500$ grup aldık. Siz de $m$ ve $n$ için farklı değerler alarak inceleme yapın. | $P( mathcal{A})$ ve $P( mathcal{B})$ olasılıklarına sahip olayları göz önüne alarak $P( mathcal{A} cup mathcal{B})$ ve $P( mathcal{A} cap mathcal{B})$ olasılıkları için alt ve üst sınırlar belirleyin. (Venn Şeması ile görebilirsiniz.) | $A$, $B$, ve $C$ gibi üç rassal değişkenimiz var. $B$ sadece $A$ ile bağımlı ve $C$ sadece $B$ ile bağımlı. $P(A, B, C)$ olasılığını nasıl sadeleştirirsiniz? (Bu bir Markov Zinciri&#39;dir.) | Uygulamamızda ilk test daha güvenilirdi. Neden ilk testi ikinci kez tekrarlamak iyi bir fikir değildir? | Discussions .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/22/olasilik.html",
            "relUrl": "/jupyter/2020/02/22/olasilik.html",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "İleri Lineer Regresyon Uygulaması (✗)",
            "content": "The following additional libraries are needed to run this notebook. Note that running on Colab is experimental, please report a Github issue if you have any problem. . !pip install -U mxnet-cu101mkl==1.6.0 # updating mxnet to at least v1.6 !pip install d2l==0.13.2 -f https://d2l.ai/whl.html # installing d2l . Concise Implementation of Linear Regression . :label:sec_linear_gluon . Broad and intense interest in deep learning for the past several years has inspired both companies, academics, and hobbyists to develop a variety of mature open source frameworks for automating the repetitive work of implementing gradient-based learning algorithms. In the previous section, we relied only on (i) tensors for data storage and linear algebra; and (ii) auto differentiation for calculating derivatives. In practice, because data iterators, loss functions, optimizers, and neural network layers (and some whole architectures) are so common, modern libraries implement these components for us as well. . In this section, we will show you how to implement the linear regression model from :numref:sec_linear_scratch concisely by using framework&#39;s high-level APIs. . Generating the Dataset . To start, we will generate the same dataset as in the previous section. . from d2l import mxnet as d2l from mxnet import autograd, gluon, np, npx npx.set_np() true_w = np.array([2, -3.4]) true_b = 4.2 features, labels = d2l.synthetic_data(true_w, true_b, 1000) . Reading the Dataset . Rather than rolling our own iterator, we can call upon the data module to read data. The first step will be to instantiate an ArrayDataset. This object&#39;s constructor takes one or more tensors as arguments. Here, we pass in features and labels as arguments. Next, we will use the ArrayDataset to instantiate a DataLoader, which also requires that we specify a batch_size and specify a Boolean value shuffle indicating whether or not we want the DataLoader to shuffle the data on each epoch (pass through the dataset). . def load_array(data_arrays, batch_size, is_train=True): #@save &quot;&quot;&quot;Construct a Gluon data loader.&quot;&quot;&quot; dataset = gluon.data.ArrayDataset(*data_arrays) return gluon.data.DataLoader(dataset, batch_size, shuffle=is_train) batch_size = 10 data_iter = load_array((features, labels), batch_size) . Now we can use data_iter in much the same way as we called the data_iter function in the previous section. To verify that it is working, we can read and print the first minibatch of instances. Comparing to :numref:sec_linear_scratch, here we use iter to construct an Python iterator and then use next to obtain the first item from the iterator. . next(iter(data_iter)) . [array([[ 0.33342266, -0.23580593], [ 2.3943908 , -0.04466231], [ 0.6816457 , 0.27752855], [-1.7383806 , -0.6379685 ], [-0.9778045 , 0.5815632 ], [-0.9712193 , 0.5035904 ], [-0.23578128, -0.4984049 ], [-0.01892485, -1.5284138 ], [-1.5667844 , -1.8091347 ], [-0.01124159, 0.6532863 ]]), array([5.6608744 , 9.127469 , 4.633699 , 2.8726306 , 0.26861465, 0.53360987, 5.4180074 , 9.356497 , 7.2266026 , 1.9496151 ])] . Defining the Model . When we implemented linear regression from scratch (in :numref:sec_linear_scratch), we defined our model parameters explicitly and coded up the calculations to produce output using basic linear algebra operations. You should know how to do this. But once your models get more complex, and once you have to do this nearly every day, you will be glad for the assistance. The situation is similar to coding up your own blog from scratch. Doing it once or twice is rewarding and instructive, but you would be a lousy web developer if every time you needed a blog you spent a month reinventing the wheel. . For standard operations, we can use the framework&#39;s predefined layers, which allow us to focus especially on the layers used to construct the model rather than having to focus on the implementation. To define a linear model, we first import the nn module, which defines a large number of neural network layers (note that &quot;nn&quot; is an abbreviation for neural networks). We will first define a model variable net, which will refer to an instance of the Sequential class. The Sequential class defines a container for several layers that will be chained together. Given input data, a Sequential passes it through the first layer, in turn passing the output as the second layer&#39;s input and so forth. In the following example, our model consists of only one layer, so we do not really need Sequential. But since nearly all of our future models will involve multiple layers, we will use it anyway just to familiarize you with the most standard workflow. . Recall the architecture of a single-layer network as shown in :numref:fig_singleneuron. The layer is said to be fully-connected because each of its inputs are connected to each of its outputs by means of a matrix-vector multiplication. . :label:fig_singleneuron . from mxnet.gluon import nn net = nn.Sequential() net.add(nn.Dense(1)) . In Gluon, the fully-connected layer is defined in the Dense class. Since we only want to generate a single scalar output, we set that number to $1$. . It is worth noting that, for convenience, Gluon does not require us to specify the input shape for each layer. So here, we do not need to tell Gluon how many inputs go into this linear layer. When we first try to pass data through our model, e.g., when we execute net(X) later, Gluon will automatically infer the number of inputs to each layer. We will describe how this works in more detail in the chapter &quot;Deep Learning Computation&quot;. . Initializing Model Parameters . Before using net, we need to initialize the model parameters, such as the weights and biases in the linear regression model. . We will import the initializer module from MXNet. This module provides various methods for model parameter initialization. Gluon makes init available as a shortcut (abbreviation) to access the initializer package. By calling init.Normal(sigma=0.01), we specify that each weight parameter should be randomly sampled from a normal distribution with mean $0$ and standard deviation $0.01$. The bias parameter will be initialized to zero by default. Both the weight vector and bias will have attached gradients. . from mxnet import init net.initialize(init.Normal(sigma=0.01)) . The code above may look straightforward but you should note that something strange is happening here. We are initializing parameters for a network even though Gluon does not yet know how many dimensions the input will have! It might be $2$ as in our example or it might be $2000$. Gluon lets us get away with this because behind the scenes, the initialization is actually deferred. The real initialization will take place only when we for the first time attempt to pass data through the network. Just be careful to remember that since the parameters have not been initialized yet, we cannot access or manipulate them. . Defining the Loss Function . In Gluon, the loss module defines various loss functions. We will use the imported module loss with the pseudonym gloss to avoid confusing it for the variable holding our chosen loss function. In this example, we will use the Gluon implementation of squared loss (L2Loss). . from mxnet.gluon import loss as gloss loss = gloss.L2Loss() . Defining the Optimization Algorithm . Minibatch SGD and related variants are standard tools for optimizing neural networks and thus Gluon supports SGD alongside a number of variations on this algorithm through its Trainer class. When we instantiate the Trainer, we will specify the parameters to optimize over (obtainable from our net via net.collect_params()), the optimization algorithm we wish to use (sgd), and a dictionary of hyper-parameters required by our optimization algorithm. SGD just requires that we set the value learning_rate, (here we set it to 0.03). . from mxnet import gluon trainer = gluon.Trainer(net.collect_params(), &#39;sgd&#39;, {&#39;learning_rate&#39;: 0.03}) . Training . You might have noticed that expressing our model through Gluon requires comparatively few lines of code. We did not have to individually allocate parameters, define our loss function, or implement stochastic gradient descent. Once we start working with much more complex models, Gluon&#39;s advantages will grow considerably. However, once we have all the basic pieces in place, the training loop itself is strikingly similar to what we did when implementing everything from scratch. . To refresh your memory: for some number of epochs, we will make a complete pass over the dataset (train_data), iteratively grabbing one minibatch of inputs and the corresponding ground-truth labels. For each minibatch, we go through the following ritual: . Generate predictions by calling net(X) and calculate the loss l (the forward pass). | Calculate gradients by calling l.backward() (the backward pass). | Update the model parameters by invoking our SGD optimizer (note that trainer already knows which parameters to optimize over, so we just need to pass in the minibatch size. | . For good measure, we compute the loss after each epoch and print it to monitor progress. . num_epochs = 3 for epoch in range(1, num_epochs + 1): for X, y in data_iter: with autograd.record(): l = loss(net(X), y) l.backward() trainer.step(batch_size) l = loss(net(features), labels) print(&#39;epoch %d, loss: %f&#39; % (epoch, l.mean().asnumpy())) . epoch 1, loss: 0.025046 epoch 2, loss: 0.000089 epoch 3, loss: 0.000051 . Below, we compare the model parameters learned by training on finite data and the actual parameters that generated our dataset. To access parameters with Gluon, we first access the layer that we need from net and then access that layer&#39;s weight (weight) and bias (bias). To access each parameter&#39;s values as a tensor, we invoke its data method. As in our from-scratch implementation, note that our estimated parameters are close to their ground truth counterparts. . w = net[0].weight.data() print(&#39;Error in estimating w&#39;, true_w.reshape(w.shape) - w) b = net[0].bias.data() print(&#39;Error in estimating b&#39;, true_b - b) . Error in estimating w [[ 0.00041139 -0.00037718]] Error in estimating b [0.00084257] . Summary . Using Gluon, we can implement models much more succinctly. | In Gluon, the data module provides tools for data processing, the nn module defines a large number of neural network layers, and the loss module defines many common loss functions. | MXNet&#39;s module initializer provides various methods for model parameter initialization. | Dimensionality and storage are automatically inferred (but be careful not to attempt to access parameters before they have been initialized). | . Exercises . If we replace l = loss(output, y) with l = loss(output, y).mean(), we need to change trainer.step(batch_size) to trainer.step(1) for the code to behave identically. Why? | Review the MXNet documentation to see what loss functions and initialization methods are provided in the modules gluon.loss and init. Replace the loss by Huber&#39;s loss. | How do you access the gradient of dense.weight? | Discussions .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/22/Linear-Regresyon-Tam-Uygulama.html",
            "relUrl": "/jupyter/2020/02/22/Linear-Regresyon-Tam-Uygulama.html",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Softmaks Regresyonu (✗)",
            "content": "Softmaks Regresyonu . Önceki bölümlerde lineer regresyon tanıtıldı, daha sonra nasıl hesaplanacağını hatta büyük veri olması durumunda özel kütüphaneler ile nasıl iş yapılacağını gördük. . Regresyon, bir şeyin ne kadar, kaç tane olduğu gibi sorulara cevap aradığımızda kullandığımız bir araçtır. Bir evin kaç araya satılabileceğini, bir takımın kaç maç kazanabileceğini veya bir hastanın hastanede kaç gün yatacağını tahimin etmek istiyorsanız, muhtemelen regresyon sizin için en iyisidir. . Pratik uygulamalarda sınıflandırma daha çok gereklidir. Sınıflandırmada nesnelerin ne kadar olduğu yerine hangisi olduğu ile ilgileniriz: . Bu e-posta istenmeyen bildirim midir? | Bu müşterinin hizmet alması muhtemel midir? | Bu resim maymun, köpek, kedi veya horoz arasından hangisinin resmidir? | Hangi film sayfayı ziyaret eden kişinin en çok izlemek isteyeceği türdendir? | . Makine öğrenmesi uygulayıcıları günlük kullanımda sınıflandırma ifadesini birbirinden ince bir çizgiyle ayrılan iki durum için kullanılır: (i) Örneğin hangi sınıfa ait olduğunu kesin olarak belirlemek (hard assignment) istediğimiz durum. (ii) Esnek olarak belirlemek (soft assignment), yani her bir sınıfa ait olma olasığının belirlenmesi. Aradaki fark detaya indiğinizde kapanır çünkü kesin olarak sınıfları belirlerken de aslında olasılık kullanırız. . S&#305;n&#305;fland&#305;rma (Classification) . Konuya çabuk ısınmak adına, $2 times2$ boyutunda siyah-beyaz resimlerin sınıflandırılması örneği ile başlayalım. Her bir pikseli bir sayı ile gösterirsek, bir resim için $x_1, x_2, x_3, x_4$ ile gösterdiğimiz dört özellik belirlenmiş olur. Dahası, resimlerin &quot;kedi&quot;, &quot;tavuk&quot; ve &quot;köpek&quot; sınıflarından birine ait olduğunu kabul edelim. . Şimdi etiketlere yani resmin ait olduğu sınıfı nasıl ifade edeceğimize karar vermeliyiz. En doğal yol {kedi, tavuk, köpek} sınıflarını, birden üçe kadar olan tamsayılarla gösterip $y in {1, 2, 3 }$ biçiminde ifade etmektedir. Bu şekilde bilgisayarın hafızasına yük olmayız. Sınıflar arasıda doğal bir sıralama söz konusu olsaydı problemimiz regresyon problemi olurdu ve bu tür etiketleri kullannabilirdik. Mesela {bebek, çokuk, genç, yetişkin, yaşlı} örneğinde olduğu gibi. . Ancak genellikle sınıflandırma problemlerinde sınıflar arasında doğal bir hiyerarşi yoktur. Neyse ki İstatistikçiler uzun yıllar önce buna bir çözüm buldular: tek aktif kod (one-hot encoding). Tek aktif kod, sınıf sayısı kadar bileşene sahip bir vektördür. Veri kümseindeki bir örnek için tek aktif kod vektörü oluşturulurken, örneğin ait olduğu bileşen $1$, diğer bilşenler $0$ alı alınır. Bu durumda yukarıdaki üçlü sınıflandırmada etiketler . $$ mathbf{y} in {(1, 0, 0), (0, 1, 0), (0, 0, 1) }$$ . şeklinde vektörler olur. Eğer $ mathbf{y}$ vektörü $(1, 0, 0)$ ise &quot;kedi&quot;, $(0, 1, 0)$ ise &quot;tavuk&quot; ve $(0, 0, 1)$ ise &quot;köpek&quot; belirtir. . A&#287; Yap&#305;s&#305; (Network Architecture) . Her sınıfın koşullu olasılığını tahmin etmek için çoklu çıktı veren bir modele ihtiyacımız var. Lineer modellerle sınıflandırma yapabilmek amacıyla çıktı sayısı kadar lineer fonksiyon gerekir. Her çıktı kendi lineer fonksiyonuna karşılık gelir. Bizim durumumuzda $3$ çıktı sınıfı ve $4$ özellik olduğundan, $w$ ile göstereceğimiz $12$ tane ağırlık (weight), $b$ ile göstereceğimiz $3$ tane yanlılık (bias) terimleri olacaktır. Şimdi $o$ ile gösterilen her çıktı (output) için . $$ begin{aligned} o_1 &amp;= x_1 w_{11} + x_2 w_{12} + x_3 w_{13} + x_4 w_{14} + b_1, o_2 &amp;= x_1 w_{21} + x_2 w_{22} + x_3 w_{23} + x_4 w_{24} + b_2, o_3 &amp;= x_1 w_{31} + x_2 w_{32} + x_3 w_{33} + x_4 w_{34} + b_3 end{aligned} $$elde edilir. Bu hesabı aşağıdaki sinir ağı (neural network) diyagramı ile gösterebiliriz. Lineer regresyonda olduğu gibi, lojistik regresyon modeli de bir tek katman içerir. Her bir $o_1, o_2$, and $o_3$ çıktısı tüm $x_1$, $x_2$, $x_3$, and $x_4$ girdileri ile bağımlı olduğundan, çıktı katmanı tam bağlantılı katmanıdır (fully-connected layer). . . Modelimizi daha derlitoplu ifade etmek için, Lineer Cebir gösterimi kullanacağız. Vektör formatında $ mathbf{o} = mathbf{W} mathbf{x} + mathbf{b}$ yazarak hem matematiksel açıdan hem de kod yazmada daha uygun bir form elde edilir. Burada tüm ağırlıklar $3 times4$ ebatında $ mathbf{W}$ matrisini oluşturur. Verilen bir $ mathbf{x}$veri örneği için çıktı vektörümüz, ağırlık matris ile örnek vektörünün çarpımına $ mathbf{b}$ yanlılık vektörünün eklenmesiyle elde edilir. . Softmaks &#304;&#351;lemi (Softmax Operation) . Modelimizin çıktılarını olasılıklar olarak yorumlamak istiyoruz. Parametrelerimizi, verinin olabılırılığini maksimum yapacak şekilde belirleyeceğiz. Daha sonra da tahminler üretebilmek için, bir eşik belirleyeceğiz. Örneğin elde edilen olasılıklar üzerinden en büyüğüne karşılık gelen sınıfı seçeceğiz. . Daha açık ifade edelim: $ hat{y}_k$ çıktısını verilen bir girdinin $k$ sınıfında olma olasılığı anlamını taşımasını istiyoruz. Bu durumda $ operatorname*{argmax}_k y_k$ işlemi sonucunda en büyük değere sahip sınıfı seçeriz. Mesela $ hat{y}_1$, $ hat{y}_2$, and $ hat{y}_3$ çıktıları $0.1$, $0.8$, and $0.1$ değerlerini alıyorsa, seçeceğimiz sınıf $2$ numaralı sınıftır, yani örneğimizdeki &quot;tavuk&quot; resmidir. . Yukarıda ${o}$ ile gösterilen ve &quot;logit&quot; denilen sayılar modelin çıktıları gibi görünebilir. Ancak lineer katmanın çıktılarını olasılıklar gibi ele almak sorun çıkarabilir. Bunların toplamının $1$ olması gerekiyor. Hatta girdilere bağlı olarak negatif değerler bile alıyorlar. Bunlar olasılığın temel aksiyomlarını (kabullerini) ihlal ediyor. . Bunları olasılıklarolarak alabilmemiz için her girdi için toplamlarının $1$ olması gerekiyor. Dahası kayıp fonksiyonunu da olasılıkların anlamlı olmasını sağlayacak şekilde seçmeliyiz. Modelimizin $0.5$ sonucunu verdiği tüm durumlarda bu örneklerin yarısının belirtilen sınıfa ait olduğunu düşünürüz. Buna ayarlama (calibration) denir. . Softmaks fonksiyonu 1959 yılında sosyal bilimci R. Duncan Luce tarafından bahsettiğimiz sınıflandırmaya benzer olan seçim modeli için bulundu. Elde edilen $o$ değerlerini negatif olmayan ve toplamları $1$ olan sayılara çevirmek, bunun yanında modelimizin türevlenebilir olmasını şu şekilde sağlayacağız: Bir $o$ sayısının üstel fonksiyon altındaki değerini diğer tüm sayıların üstellerinin toplamına oranlayacağız. Sayının üstelini almak sonucun negatif olmamasını, toplama oranlamak da sonuçların toplamının $1$ olmasını garanti eder. Matemaiksel olarak . $$ hat{y}_i = frac{ exp(o_i)}{ sum_j exp(o_j)} quad text{olmak üzere} quad hat{ mathbf{y}} = mathrm{softmax}( mathbf{o}) $$şeklinde yazabiliriz. . Üçlü örneğimizde her $i$ için $0 leq hat{y}_i leq 1$ ve $ hat{y}_1 + hat{y}_2 + hat{y}_3 = 1$ olacağını görebilirsiniz. Dolayısıyla $ hat{y}$ bir olasılık dağılımı belirtir ve $ hat{ mathbf{y}}$ vektörünün değerleri de bu şekilde yorumlanır. Softmaks işlemi büyüklük küçüklük sıralamsını değiştirmez ve yani en olası sınıfı iki yoldan da seçebiliriz: . $$ hat{ imath}( mathbf{o}) = operatorname*{argmax}_i o_i = operatorname*{argmax}_i hat y_i. $$Sonuç olarak $ mathbf{o}$ vektörünü oluşturan sayılar, softmaks öncesi her sınıfın olasılıklarını belirleyen sayılardır. Vektör gösterimi ile ${ mathbf{o}}^{(i)} = mathbf{W} { mathbf{x}}^{(i)} + { mathbf{b}}$, where ${ hat{ mathbf{y}}}^{(i)} = mathrm{softmax}({ mathbf{o}}^{(i)})$ şeklinde yazabiliriz. . K&#252;&#231;&#252;k Y&#305;&#287;&#305;nlar&#305; Vekt&#246;rle&#351;tirme (Vectorization for Minibatches) . Etkin bir hesaplama ve GPU kullanabilmek için verinin küçük veri yığınları ile vektör hesabı yapılır. Verinin bir kısmından oluşan $ mathbf{X}$ yığınını ele alalım. Yığın $n$ elemandan örnek veriden ve her bir örnek $d$ boyutlu olsun. Sınıfların (çıktılar) saysının da $q$ olduğunu kabul edelim. Bu durumda küçük yığının $ mathbf{X}$ özellik matrisi $ mathbb{R}^{n times d}$ uzayındadır. Benzer şekilde ağırlıklar $ mathbf{W} in mathbb{R}^{d times q}$ ve yanlılık terimi $ mathbf{b} in mathbb{R}^q$ olur. Dolayısıyla denklemlerimiz $$ begin{aligned} mathbf{O} &amp;= mathbf{X} mathbf{W} + mathbf{b}, hat{ mathbf{Y}} &amp; = mathrm{softmax}( mathbf{O}). end{aligned} $$ formunda yazılabilir. . Veri kümesindeki örnekler için tek tek hesaplama yapmak istediğimizde matris-vektör çarpımı yapacaktık, burada ise matris-matris çarpımı ile işlemleri hızlandırıyoruz. Softmaks için de önce $ mathbf{O}$ matrsinin eksponansiyeli alınır, daha sonra da tolama bölünerek normalleştirme yapılır. . Kay&#305;p Fonksiyonu (Loss Function) . Şimdi tahminlerimizi oluşturan olasılıkların niteliğini ölçmek için bir kayıp fonksiyonu gerekiyor. Lineer regresyonda oluğu gibi maksimum olabilirlik (maximum likelyhood) yadımıyla seçtiğimiz kayıp fonksiyonunun sağlamasını yapacağız. . Olabilirli&#287;in Logaritmas&#305; (Log-Likelihood) . Softmaks fonksiyonu $ hat{ mathbf{y}}$ vektörünü verir ve bunu verilen $x$ girdisine karşılık her sınıfın koşullu olasılığı olarak yorumlarız. Örneğin, $ hat{y}_1$ = $ hat{P}(y= mathrm{kedi} mid mathbf{x})$ gibi. Modelimizin tahminleri ile gerçek durumu karşılaştırmak için özelikler bilindiğinde sınıfların ne kadar olası durduğunu kontrol ederiz. Yani $$ P(Y mid X) = prod_{i=1}^n P(y^{(i)} mid x^{(i)}) $$ . olasılığına veya . $$ - log P(Y mid X) = sum_{i=1}^n - log P(y^{(i)} mid x^{(i)}) $$olabilirliğin logaritmasına bakılır. $P(Y mid X)$ ifadesini maksimize etmek (yani $- log P(Y mid X)$ ifadesini minimum yapmak) etiketi iyi tahmin etmek anlamına gelir. Buradan . $$ l = - log P(y mid x) = - sum_j y_j log hat{y}_j. $$kayıp fonksiyonu elde edilir. (Gösterimin sade olması için $(i)$ üst indisi atılmıştır.) Daha sonra açıklanacak sebeplerden bu bu kayıp fonksiyonuna çapraz entropi (cross-entropy) denir. Burada $ hat{y}$ bir ayrık olasılık dağılımı ve $ mathbf{y}$ bir tek aktif vektördür. Doayısıyla tüm $j$&#39;ler üzerinden alınan toplamda biri hariç tüm bileşenler ssıfır olur. . Hence the sum over all coordinates $j$ vanishes for all but one term. Since all $ hat{y}_j$ are probabilities, their logarithm is never larger than $0$. Consequently, the loss function cannot be minimized any further if we correctly predict $y$ with certainty, i.e., if $P(y mid x) = 1$ for the correct label. Note that this is often not possible. For example, there might be label noise in the dataset (some examples may be mislabeled). It may also not be possible when the input features are not sufficiently informative to classify every example perfectly. . Softmax and Derivatives . Since the softmax and the corresponding loss are so common, it is worth while understanding a bit better how it is computed. Plugging $o$ into the definition of the loss $l$ and using the definition of the softmax we obtain: . $$ l = - sum_j y_j log hat{y}_j = sum_j y_j log sum_k exp(o_k) - sum_j y_j o_j = log sum_k exp(o_k) - sum_j y_j o_j. $$To understand a bit better what is going on, consider the derivative with respect to $o$. We get . $$ partial_{o_j} l = frac{ exp(o_j)}{ sum_k exp(o_k)} - y_j = mathrm{softmax}( mathbf{o})_j - y_j = P(y = j mid x) - y_j. $$In other words, the gradient is the difference between the probability assigned to the true class by our model, as expressed by the probability $P(y mid x)$, and what actually happened, as expressed by $y$. In this sense, it is very similar to what we saw in regression, where the gradient was the difference between the observation $y$ and estimate $ hat{y}$. This is not coincidence. In any exponential family model, the gradients of the log-likelihood are given by precisely this term. This fact makes computing gradients easy in practice. . Cross-Entropy Loss . Now consider the case where we observe not just a single outcome but an entire distribution over outcomes. We can use the same representation as before for $y$. The only difference is that rather than a vector containing only binary entries, say $(0, 0, 1)$, we now have a generic probability vector, say $(0.1, 0.2, 0.7)$. The math that we used previously to define the loss $l$ still works out fine, just that the interpretation is slightly more general. It is the expected value of the loss for a distribution over labels. . $$ l( mathbf{y}, hat{ mathbf{y}}) = - sum_j y_j log hat{y}_j. $$This loss is called the cross-entropy loss and it is one of the most commonly used losses for multiclass classification. We can demystify the name by introducing the basics of information theory. . Information Theory Basics . Information theory deals with the problem of encoding, decoding, transmitting and manipulating information (also known as data) in as concise form as possible. . Entropy . The central idea in information theory is to quantify the information content in data. This quantity places a hard limit on our ability to compress the data. In information theory, this quantity is called the entropy of a distribution $p$, and it is captured by the following equation: . $$ H[p] = sum_j - p(j) log p(j). $$One of the fundamental theorems of information theory states that in order to encode data drawn randomly from the distribution $p$, we need at least $H[p]$ &quot;nats&quot; to encode it. If you wonder what a &quot;nat&quot; is, it is the equivalent of bit but when using a code with base $e$ rather than one with base 2. One nat is $ frac{1}{ log(2)} approx 1.44$ bit. $H[p] / 2$ is often also called the binary entropy. . Surprisal . You might be wondering what compression has to do with prediction. Imagine that we have a stream of data that we want to compress. If it is always easy for us to predict the next token, then this data is easy to compress! Take the extreme example where every token in the stream always takes the same value. That is a very boring data stream! And not only it is boring, but it is easy to predict. Because they are always the same, we do not have to transmit any information to communicate the contents of the stream. Easy to predict, easy to compress. . However if we cannot perfectly predict every event, then we might some times be surprised. Our surprise is greater when we assigned an event lower probability. For reasons that we will elaborate in the appendix, Claude Shannon settled on $ log(1/p(j)) = - log p(j)$ to quantify one&#39;s surprisal at observing an event $j$ having assigned it a (subjective) probability $p(j)$. The entropy is then the expected surprisal when one assigned the correct probabilities (that truly match the data-generating process). The entropy of the data is then the least surprised that one can ever be (in expectation). . Cross-Entropy Revisited . So if entropy is level of surprise experienced by someone who knows the true probability, then you might be wondering, what is cross-entropy? The cross-entropy from $p$ to $q$, denoted $H(p, q)$, is the expected surprisal of an observer with subjective probabilities $q$ upon seeing data that was actually generated according to probabilities $p$. The lowest possible cross-entropy is achieved when $p=q$. In this case, the cross-entropy from $p$ to $q$ is $H(p, p)= H(p)$. Relating this back to our classification objective, even if we get the best possible predictions, we will never be perfect. Our loss is lower-bounded by the entropy given by the actual conditional distributions $P( mathbf{y} mid mathbf{x})$. . Kullback-Leibler Divergence . Perhaps the most common way to measure the distance between two distributions is to calculate the Kullback-Leibler divergence $D(p |q)$. This is simply the difference between the cross-entropy and the entropy, i.e., the additional cross-entropy incurred over the irreducible minimum value it could take: . $$ D(p |q) = H(p, q) - H[p] = sum_j p(j) log frac{p(j)}{q(j)}. $$Note that in classification, we do not know the true $p$, so we cannot compute the entropy directly. However, because the entropy is out of our control, minimizing $D(p |q)$ with respect to $q$ is equivalent to minimizing the cross-entropy loss. . In short, we can think of the cross-entropy classification objective in two ways: (i) as maximizing the likelihood of the observed data; and (ii) as minimizing our surprise (and thus the number of bits) required to communicate the labels. . Model Prediction and Evaluation . After training the softmax regression model, given any example features, we can predict the probability of each output category. Normally, we use the category with the highest predicted probability as the output category. The prediction is correct if it is consistent with the actual category (label). In the next part of the experiment, we will use accuracy to evaluate the model’s performance. This is equal to the ratio between the number of correct predictions and the total number of predictions. . Summary . We introduced the softmax operation which takes a vector and maps it into probabilities. | Softmax regression applies to classification problems. It uses the probability distribution of the output category in the softmax operation. | Cross-entropy is a good measure of the difference between two probability distributions. It measures the number of bits needed to encode the data given our model. | . Exercises . Show that the Kullback-Leibler divergence $D(p |q)$ is nonnegative for all distributions $p$ and $q$. Hint: use Jensen&#39;s inequality, i.e., use the fact that $- log x$ is a convex function. | Show that $ log sum_j exp(o_j)$ is a convex function in $o$. | We can explore the connection between exponential families and the softmax in some more depth Compute the second derivative of the cross-entropy loss $l(y, hat{y})$ for the softmax. | Compute the variance of the distribution given by $ mathrm{softmax}(o)$ and show that it matches the second derivative computed above. | . | Assume that we have three classes which occur with equal probability, i.e., the probability vector is $( frac{1}{3}, frac{1}{3}, frac{1}{3})$. What is the problem if we try to design a binary code for it? Can we match the entropy lower bound on the number of bits? | Can you design a better code. Hint: what happens if we try to encode two independent observations? What if we encode $n$ observations jointly? | . | Softmax is a misnomer for the mapping introduced above (but everyone in deep learning uses it). The real softmax is defined as $ mathrm{RealSoftMax}(a, b) = log ( exp(a) + exp(b))$. Prove that $ mathrm{RealSoftMax}(a, b) &gt; mathrm{max}(a, b)$. | Prove that this holds for $ lambda^{-1} mathrm{RealSoftMax}( lambda a, lambda b)$, provided that $ lambda &gt; 0$. | Show that for $ lambda to infty$ we have $ lambda^{-1} mathrm{RealSoftMax}( lambda a, lambda b) to mathrm{max}(a, b)$. | What does the soft-min look like? | Extend this to more than two numbers. | . | Discussions .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/21/Linear-Siniflandirma.html",
            "relUrl": "/jupyter/2020/02/21/Linear-Siniflandirma.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "PyTorch (✗)",
            "content": "De&#287;i&#351;kenler . Variables are containers for holding data and they&#39;re defined by a name and value. . # Integer variable x = 5 print (x) print (type(x)) . 5 &lt;class &#39;int&#39;&gt; . We can change the value of a variable by simply assigning a new value to it. . # String variable x = &quot;hello&quot; print (x) print (type(x)) . hello &lt;class &#39;str&#39;&gt; . There are many different types of variables: integers, floats, strings, boolean etc. . # int variable x = 5 print (x, type(x)) . 5 &lt;class &#39;int&#39;&gt; . # float variable x = 5.0 print (x, type(x)) . 5.0 &lt;class &#39;float&#39;&gt; . # text variable x = &quot;5&quot; print (x, type(x)) . 5 &lt;class &#39;str&#39;&gt; . # boolean variable x = True print (x, type(x)) . True &lt;class &#39;bool&#39;&gt; . We can also do operations with variables. . # Variables can be used with each other a = 1 b = 2 c = a + b print (c) . 3 . We should always know what types of variables we&#39;re dealing with so we can do the right operations with them. Here&#39;s a common mistake that can happen if we&#39;re using the wrong variable type. . # int variables a = 5 b = 3 print (a + b) . 8 . # string variables a = &quot;5&quot; b = &quot;3&quot; print (a + b) . 53 . Lists . Lists are an ordered, mutable (changeable) collection of values that are comma separated and enclosed by square brackets. A list can be comprised of many different types of variables (below is a list with an integer, string and a float). . # Creating a list x = [3, &quot;hello&quot;, 1.2] print (x) . [3, &#39;hello&#39;, 1.2] . # Length of a list len(x) . 3 . You can add to a list by using the append function. . # Adding to a list x.append(7) print (x) print (len(x)) . [3, &#39;hello&#39;, 1.2, 7] 4 . # Replacing items in a list x[1] = &quot;bye&quot; print (x) . [3, &#39;bye&#39;, 1.2, 7] . # Operations y = [2.4, &quot;world&quot;] z = x + y print (z) . [3, &#39;bye&#39;, 1.2, 7, 2.4, &#39;world&#39;] . Indexing and Slicing . Indexing and slicing from lists allow us to retrieve specific values within lists. Note that indices can be positive (starting from 0) or negative (-1 and lower, where -1 is the last item in the list). . # Indexing x = [3, &quot;hello&quot;, 1.2] print (&quot;x[0]: &quot;, x[0]) print (&quot;x[1]: &quot;, x[1]) print (&quot;x[-1]: &quot;, x[-1]) # the last item print (&quot;x[-2]: &quot;, x[-2]) # the second to last item . x[0]: 3 x[1]: hello x[-1]: 1.2 x[-2]: hello . # Slicing print (&quot;x[:]: &quot;, x[:]) # all indices print (&quot;x[1:]: &quot;, x[1:]) # index 1 to the end of the list print (&quot;x[1:2]: &quot;, x[1:2]) # index 1 to index 2 (not including index 2) print (&quot;x[:-1]: &quot;, x[:-1]) # index 0 to last index (not including last index) . x[:]: [3, &#39;hello&#39;, 1.2] x[1:]: [&#39;hello&#39;, 1.2] x[1:2]: [&#39;hello&#39;] x[:-1]: [3, &#39;hello&#39;] . Tuples . Tuples are collections that are ordered and immutable (unchangeable). You will use these to store values that will never be changed. . # Creating a tuple x = (3.0, &quot;hello&quot;) # tuples start and end with () print (x) . (3.0, &#39;hello&#39;) . # Adding values to a tuple x = x + (5.6, 4) print (x) . (3.0, &#39;hello&#39;, 5.6, 4) . # Try to change (it won&#39;t work and you&#39;ll get an error) x[0] = 1.2 . TypeError Traceback (most recent call last) &lt;ipython-input-19-d0da6f639f74&gt; in &lt;module&gt;() -&gt; 1 x[0] = 1.2 TypeError: &#39;tuple&#39; object does not support item assignment . Dictionaries . Dictionaries are an unordered, mutable and indexed collection of key-value pairs. You can retrieve values based on the key and a dictionary cannot have two of the same keys. . # Creating a dictionary person = {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} print (person) print (person[&#39;name&#39;]) print (person[&#39;eye_color&#39;]) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} Goku brown . # Changing the value for a key person[&#39;eye_color&#39;] = &#39;green&#39; print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;} . # Adding new key-value pairs person[&#39;age&#39;] = 24 print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;, &#39;age&#39;: 24} . # Length of a dictionary print (len(person)) . 3 . If statements . We can use if statements to conditionally do something. The conditions are defined by the words if, elif (which stands for else if) and else. We can have as many elif statements as we want. The indented code below each condition is the code that will execute if the condition is True. . # If statement x = 4 if x &lt; 1: score = &#39;low&#39; elif x &lt;= 4: # elif = else if score = &#39;medium&#39; else: score = &#39;high&#39; print (score) . medium . # If statement with a boolean x = True if x: print (&quot;it worked&quot;) . it worked . Loops . For Loops . A for loop can iterate over a collection of values (lists, tuples, dictionaries, etc.) The indented code is executed for each item in the collection of values. . # For loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: print (veggie) . carrots broccoli beans . When the loop encounters the break command, the loop will terminate immediately. If there were more items in the list, they will not be processed. . # `break` from a for loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: break print (veggie) . carrots . When the loop encounters the continue command, the loop will skip all other operations for that item in the list only. If there were more items in the list, the loop will continue normally. . # `continue` to the next iteration veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: continue print (veggie) . carrots beans . While Loops . A while loop can perform repeatedly as long as a condition is True. We can use continue and break commands in while loops as well. . # While loop x = 3 while x &gt; 0: x -= 1 # same as x = x - 1 print (x) . 2 1 0 . Functions . Functions are a way to modularize reusable pieces of code. They&#39;re defined by the keyword def which stands for definition and they can have the following components. . # Define the function def add_two(x): &quot;&quot;&quot;Increase x by 2.&quot;&quot;&quot; # explains what this function will do x += 2 return x . Here are the components that may be required when we want to use the function. we need to ensure that the function name and the input parameters match with how we defined the function above. . # Use the function score = 0 new_score = add_two(x=score) print (new_score) . 2 . A function can have as many input parameters and outputs as we want. . # Function with multiple inputs def join_name(first_name, last_name): &quot;&quot;&quot;Combine first name and last name.&quot;&quot;&quot; joined_name = first_name + &quot; &quot; + last_name return joined_name . # Use the function first_name = &quot;Goku&quot; last_name = &quot;Mohandas&quot; joined_name = join_name(first_name=first_name, last_name=last_name) print (joined_name) . Goku Mohandas . NOTE: It&#39;s good practice to always use keyword argument when using a function so that it&#39;s very clear what input variable belongs to what function input parameter. On a related note, you will often see the terms *args and **kwargs which stand for arguments and keyword arguments. You can extract them when they are passed into a function. The significance of the * is that any number of arguments and keyword arguments can be passed into the function. . def f(*args, **kwargs): x = args[0] y = kwargs.get(&#39;y&#39;) print (f&quot;x: {x}, y: {y}&quot;) . f(5, y=2) . x: 5, y: 2 . Classes . Classes are object constructors and are a fundamental component of object oriented programming in Python. They are composed of a set of functions that define the class and it&#39;s operations. . __init__() function . The init function is used when an instance of the class is initialized. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . &lt;__main__.Pet object at 0x7fe487e9c358&gt; Scooby . __str()__ function . The print (my_dog) command printed something not so relevant to us. Let&#39;s fix that with the __str()__ function. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . NOTE: Classes can be customized with magic functions like, __str__, to enable powerful operations. We&#39;ll be exploring additional built-in functions in subsequent notebooks (like __iter__ and __getitem__) but if you&#39;re curious, here is a tutorial on more magic methods. . Object methods . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; def change_name(self, new_name): &quot;&quot;&quot;Change the name of your Pet.&quot;&quot;&quot; self.name = new_name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . # Using a class&#39;s function my_dog.change_name(new_name=&quot;Scrappy&quot;) print (my_dog) print (my_dog.name) . dog named Scrappy Scrappy . Inheritance . Inheritance allows you to inherit all the properties and methods from another class (the parent). Notice how we inherited the initialized variables from the parent Pet class like species and name. We also inherited the change_name function. But for the __str__ function, we define our own version to overwrite the Pet class&#39; __str__ function. . class Dog(Pet): def __init__(self, species, name, breed): super().__init__(&quot;dog&quot;, name) self.breed = breed def __str__(self): return f&quot;{self.breed} named {self.name}&quot; . scooby = Dog(species=&quot;dog&quot;, breed=&quot;Great Dane&quot;, name=&quot;Scooby&quot;) print (scooby) . Great Dane named Scooby . scooby.change_name(&#39;Scooby Doo&#39;) print (scooby) . Great Dane named Scooby Doo . Decorators . Recall that functions allow us to modularize code and reuse them. However, we&#39;ll often want to add some functionality before or after the main function executes and we may want to do this for many different functions. Instead of adding more code to the original function, we can use decorators! . decorators: augment a function with pre/post-processing. Decorators wrap around the main function and allow us to operate on the inputs and or outputs. | . Suppose we have a function called operations which increments the input value x by 1. . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 2 . Now let&#39;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, let&#39;s say the increments have to be separate steps. Here&#39;s how we would do it by changing the original code: . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 x += 1 x += 1 return x . operations(x=1) . 4 . We were able to achieve what we want but we now increased the size of our operations function and if we want to do the same incrementation for any other function, we have to add the same code to all of those as well ... not very efficient. To solve this, let&#39;s create a decorator called add which increments x by 1 before and after the main function f executes. . Creating a decorator function . The decorator function accepts a function f which is the function we wish to wrap around (in our case, it&#39;s operations). The output of the decorator is its wrapper function which receives the arguments and keyword arguments passed to function f. . Inside the wrapper function, we can extract the input parameters [line 5] passed to function f and make any changes we want [line 6]. Then the function f is executed [line 7] and then we can make changes to the outputs as well [line 8]. Finally, the wrapper function will return some value(s) [line 9] which is what the decorator returns as well since it returns wrapper. . # Decorator def add(f): def wrapper(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) x += 1 # executes after function f return x return wrapper . We can use this decorator by simply adding it to the top of our main function preceded by the @ symbol. . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 4 . Suppose we wanted to debug and see what function actually executed with operations. . operations.__name__, operations.__doc__ . (&#39;wrapper&#39;, &#39;Wrapper function for @add.&#39;) . The function name and docstring are not what we&#39;re looking for but it appears this way because the wrapper function is what was executed. In order to fix this, Python offers functools.wraps which carries the main function&#39;s metadata. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) x += 1 x = f(*args, **kwargs, x=x) x += 1 return x return wrap . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations.__name__, operations.__doc__ . (&#39;operations&#39;, &#39;Basic operations.&#39;) . Awesome! We were able to decorate our main function operation to achieve the customization we wanted without actually altering the function. We can reuse our decorator for other functions that may need the same customization! . This was a dummy example to show how decorators work but we&#39;ll be using them heavily during our production ML lessons. A simple scenario would be using decorators to create uniform JSON responses from each API endpoint without including the bulky code in each endpoint. . Callbacks . Decorators allow for customized operations before and after the main function&#39;s execution but what about in between? Suppose we want to conditionally/situationally do some operations. Instead of writing a whole bunch of if-statements and make our functions bulky, we can use callbacks! . callbacks: conditional/situational processing within the function. | . Our callbacks will be classes that have functions with key names that will execute at various periods during the main function&#39;s execution. The function names are up to us but we need to invoke the same callback functions within our main function. . # Callback class x_tracker(object): def __init__(self, x): self.history = [] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . We can pass in as many callbacks as we want and because they have appropriately named functions, they will be invoked at the appropriate times. . def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 2 . tracker.history . [1, 2] . Putting it all together . decorators + callbacks = powerful customization before, during and after the main function’s execution without increasing its complexity. We will be using this duo to create powerful ML training scripts that are highly customizable in future lessons. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) # can do things post function f as well return x return wrap . # Callback class x_tracker(object): def __init__(self, x): self.history = [x] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . # Main function @add def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 3 . tracker.history . [1, 2, 3] . Additional resources . Python 3: This was a very quick look at Python but it&#39;s good enough for practical machine learning and we&#39;ll be learning more in future lessons. If you want to learn more, check out this free Python3 course. | . . Share and discover ML projects at Made With ML. . &nbsp; &nbsp;",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/05/PyTorch.html",
            "relUrl": "/jupyter/2020/02/05/PyTorch.html",
            "date": " • Feb 5, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Python (✗)",
            "content": "De&#287;i&#351;kenler . Variables are containers for holding data and they&#39;re defined by a name and value. . # Integer variable x = 5 print (x) print (type(x)) . 5 &lt;class &#39;int&#39;&gt; . We can change the value of a variable by simply assigning a new value to it. . # String variable x = &quot;hello&quot; print (x) print (type(x)) . hello &lt;class &#39;str&#39;&gt; . There are many different types of variables: integers, floats, strings, boolean etc. . # int variable x = 5 print (x, type(x)) . 5 &lt;class &#39;int&#39;&gt; . # float variable x = 5.0 print (x, type(x)) . 5.0 &lt;class &#39;float&#39;&gt; . # text variable x = &quot;5&quot; print (x, type(x)) . 5 &lt;class &#39;str&#39;&gt; . # boolean variable x = True print (x, type(x)) . True &lt;class &#39;bool&#39;&gt; . We can also do operations with variables. . # Variables can be used with each other a = 1 b = 2 c = a + b print (c) . 3 . We should always know what types of variables we&#39;re dealing with so we can do the right operations with them. Here&#39;s a common mistake that can happen if we&#39;re using the wrong variable type. . # int variables a = 5 b = 3 print (a + b) . 8 . # string variables a = &quot;5&quot; b = &quot;3&quot; print (a + b) . 53 . Lists . Lists are an ordered, mutable (changeable) collection of values that are comma separated and enclosed by square brackets. A list can be comprised of many different types of variables (below is a list with an integer, string and a float). . # Creating a list x = [3, &quot;hello&quot;, 1.2] print (x) . [3, &#39;hello&#39;, 1.2] . # Length of a list len(x) . 3 . You can add to a list by using the append function. . # Adding to a list x.append(7) print (x) print (len(x)) . [3, &#39;hello&#39;, 1.2, 7] 4 . # Replacing items in a list x[1] = &quot;bye&quot; print (x) . [3, &#39;bye&#39;, 1.2, 7] . # Operations y = [2.4, &quot;world&quot;] z = x + y print (z) . [3, &#39;bye&#39;, 1.2, 7, 2.4, &#39;world&#39;] . Indexing and Slicing . Indexing and slicing from lists allow us to retrieve specific values within lists. Note that indices can be positive (starting from 0) or negative (-1 and lower, where -1 is the last item in the list). . # Indexing x = [3, &quot;hello&quot;, 1.2] print (&quot;x[0]: &quot;, x[0]) print (&quot;x[1]: &quot;, x[1]) print (&quot;x[-1]: &quot;, x[-1]) # the last item print (&quot;x[-2]: &quot;, x[-2]) # the second to last item . x[0]: 3 x[1]: hello x[-1]: 1.2 x[-2]: hello . # Slicing print (&quot;x[:]: &quot;, x[:]) # all indices print (&quot;x[1:]: &quot;, x[1:]) # index 1 to the end of the list print (&quot;x[1:2]: &quot;, x[1:2]) # index 1 to index 2 (not including index 2) print (&quot;x[:-1]: &quot;, x[:-1]) # index 0 to last index (not including last index) . x[:]: [3, &#39;hello&#39;, 1.2] x[1:]: [&#39;hello&#39;, 1.2] x[1:2]: [&#39;hello&#39;] x[:-1]: [3, &#39;hello&#39;] . Tuples . Tuples are collections that are ordered and immutable (unchangeable). You will use these to store values that will never be changed. . # Creating a tuple x = (3.0, &quot;hello&quot;) # tuples start and end with () print (x) . (3.0, &#39;hello&#39;) . # Adding values to a tuple x = x + (5.6, 4) print (x) . (3.0, &#39;hello&#39;, 5.6, 4) . # Try to change (it won&#39;t work and you&#39;ll get an error) x[0] = 1.2 . TypeError Traceback (most recent call last) &lt;ipython-input-19-d0da6f639f74&gt; in &lt;module&gt;() -&gt; 1 x[0] = 1.2 TypeError: &#39;tuple&#39; object does not support item assignment . Dictionaries . Dictionaries are an unordered, mutable and indexed collection of key-value pairs. You can retrieve values based on the key and a dictionary cannot have two of the same keys. . # Creating a dictionary person = {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} print (person) print (person[&#39;name&#39;]) print (person[&#39;eye_color&#39;]) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} Goku brown . # Changing the value for a key person[&#39;eye_color&#39;] = &#39;green&#39; print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;} . # Adding new key-value pairs person[&#39;age&#39;] = 24 print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;, &#39;age&#39;: 24} . # Length of a dictionary print (len(person)) . 3 . If statements . We can use if statements to conditionally do something. The conditions are defined by the words if, elif (which stands for else if) and else. We can have as many elif statements as we want. The indented code below each condition is the code that will execute if the condition is True. . # If statement x = 4 if x &lt; 1: score = &#39;low&#39; elif x &lt;= 4: # elif = else if score = &#39;medium&#39; else: score = &#39;high&#39; print (score) . medium . # If statement with a boolean x = True if x: print (&quot;it worked&quot;) . it worked . Loops . For Loops . A for loop can iterate over a collection of values (lists, tuples, dictionaries, etc.) The indented code is executed for each item in the collection of values. . # For loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: print (veggie) . carrots broccoli beans . When the loop encounters the break command, the loop will terminate immediately. If there were more items in the list, they will not be processed. . # `break` from a for loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: break print (veggie) . carrots . When the loop encounters the continue command, the loop will skip all other operations for that item in the list only. If there were more items in the list, the loop will continue normally. . # `continue` to the next iteration veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: continue print (veggie) . carrots beans . While Loops . A while loop can perform repeatedly as long as a condition is True. We can use continue and break commands in while loops as well. . # While loop x = 3 while x &gt; 0: x -= 1 # same as x = x - 1 print (x) . 2 1 0 . Functions . Functions are a way to modularize reusable pieces of code. They&#39;re defined by the keyword def which stands for definition and they can have the following components. . # Define the function def add_two(x): &quot;&quot;&quot;Increase x by 2.&quot;&quot;&quot; # explains what this function will do x += 2 return x . Here are the components that may be required when we want to use the function. we need to ensure that the function name and the input parameters match with how we defined the function above. . # Use the function score = 0 new_score = add_two(x=score) print (new_score) . 2 . A function can have as many input parameters and outputs as we want. . # Function with multiple inputs def join_name(first_name, last_name): &quot;&quot;&quot;Combine first name and last name.&quot;&quot;&quot; joined_name = first_name + &quot; &quot; + last_name return joined_name . # Use the function first_name = &quot;Goku&quot; last_name = &quot;Mohandas&quot; joined_name = join_name(first_name=first_name, last_name=last_name) print (joined_name) . Goku Mohandas . NOTE: It&#39;s good practice to always use keyword argument when using a function so that it&#39;s very clear what input variable belongs to what function input parameter. On a related note, you will often see the terms *args and **kwargs which stand for arguments and keyword arguments. You can extract them when they are passed into a function. The significance of the * is that any number of arguments and keyword arguments can be passed into the function. . def f(*args, **kwargs): x = args[0] y = kwargs.get(&#39;y&#39;) print (f&quot;x: {x}, y: {y}&quot;) . f(5, y=2) . x: 5, y: 2 . Classes . Classes are object constructors and are a fundamental component of object oriented programming in Python. They are composed of a set of functions that define the class and it&#39;s operations. . __init__() function . The init function is used when an instance of the class is initialized. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . &lt;__main__.Pet object at 0x7fe487e9c358&gt; Scooby . __str()__ function . The print (my_dog) command printed something not so relevant to us. Let&#39;s fix that with the __str()__ function. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . NOTE: Classes can be customized with magic functions like, __str__, to enable powerful operations. We&#39;ll be exploring additional built-in functions in subsequent notebooks (like __iter__ and __getitem__) but if you&#39;re curious, here is a tutorial on more magic methods. . Object methods . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; def change_name(self, new_name): &quot;&quot;&quot;Change the name of your Pet.&quot;&quot;&quot; self.name = new_name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . # Using a class&#39;s function my_dog.change_name(new_name=&quot;Scrappy&quot;) print (my_dog) print (my_dog.name) . dog named Scrappy Scrappy . Inheritance . Inheritance allows you to inherit all the properties and methods from another class (the parent). Notice how we inherited the initialized variables from the parent Pet class like species and name. We also inherited the change_name function. But for the __str__ function, we define our own version to overwrite the Pet class&#39; __str__ function. . class Dog(Pet): def __init__(self, species, name, breed): super().__init__(&quot;dog&quot;, name) self.breed = breed def __str__(self): return f&quot;{self.breed} named {self.name}&quot; . scooby = Dog(species=&quot;dog&quot;, breed=&quot;Great Dane&quot;, name=&quot;Scooby&quot;) print (scooby) . Great Dane named Scooby . scooby.change_name(&#39;Scooby Doo&#39;) print (scooby) . Great Dane named Scooby Doo . Decorators . Recall that functions allow us to modularize code and reuse them. However, we&#39;ll often want to add some functionality before or after the main function executes and we may want to do this for many different functions. Instead of adding more code to the original function, we can use decorators! . decorators: augment a function with pre/post-processing. Decorators wrap around the main function and allow us to operate on the inputs and or outputs. | . Suppose we have a function called operations which increments the input value x by 1. . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 2 . Now let&#39;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, let&#39;s say the increments have to be separate steps. Here&#39;s how we would do it by changing the original code: . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 x += 1 x += 1 return x . operations(x=1) . 4 . We were able to achieve what we want but we now increased the size of our operations function and if we want to do the same incrementation for any other function, we have to add the same code to all of those as well ... not very efficient. To solve this, let&#39;s create a decorator called add which increments x by 1 before and after the main function f executes. . Creating a decorator function . The decorator function accepts a function f which is the function we wish to wrap around (in our case, it&#39;s operations). The output of the decorator is its wrapper function which receives the arguments and keyword arguments passed to function f. . Inside the wrapper function, we can extract the input parameters [line 5] passed to function f and make any changes we want [line 6]. Then the function f is executed [line 7] and then we can make changes to the outputs as well [line 8]. Finally, the wrapper function will return some value(s) [line 9] which is what the decorator returns as well since it returns wrapper. . # Decorator def add(f): def wrapper(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) x += 1 # executes after function f return x return wrapper . We can use this decorator by simply adding it to the top of our main function preceded by the @ symbol. . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 4 . Suppose we wanted to debug and see what function actually executed with operations. . operations.__name__, operations.__doc__ . (&#39;wrapper&#39;, &#39;Wrapper function for @add.&#39;) . The function name and docstring are not what we&#39;re looking for but it appears this way because the wrapper function is what was executed. In order to fix this, Python offers functools.wraps which carries the main function&#39;s metadata. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) x += 1 x = f(*args, **kwargs, x=x) x += 1 return x return wrap . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations.__name__, operations.__doc__ . (&#39;operations&#39;, &#39;Basic operations.&#39;) . Awesome! We were able to decorate our main function operation to achieve the customization we wanted without actually altering the function. We can reuse our decorator for other functions that may need the same customization! . This was a dummy example to show how decorators work but we&#39;ll be using them heavily during our production ML lessons. A simple scenario would be using decorators to create uniform JSON responses from each API endpoint without including the bulky code in each endpoint. . Callbacks . Decorators allow for customized operations before and after the main function&#39;s execution but what about in between? Suppose we want to conditionally/situationally do some operations. Instead of writing a whole bunch of if-statements and make our functions bulky, we can use callbacks! . callbacks: conditional/situational processing within the function. | . Our callbacks will be classes that have functions with key names that will execute at various periods during the main function&#39;s execution. The function names are up to us but we need to invoke the same callback functions within our main function. . # Callback class x_tracker(object): def __init__(self, x): self.history = [] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . We can pass in as many callbacks as we want and because they have appropriately named functions, they will be invoked at the appropriate times. . def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 2 . tracker.history . [1, 2] . Putting it all together . decorators + callbacks = powerful customization before, during and after the main function’s execution without increasing its complexity. We will be using this duo to create powerful ML training scripts that are highly customizable in future lessons. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) # can do things post function f as well return x return wrap . # Callback class x_tracker(object): def __init__(self, x): self.history = [x] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . # Main function @add def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 3 . tracker.history . [1, 2, 3] . Additional resources . Python 3: This was a very quick look at Python but it&#39;s good enough for practical machine learning and we&#39;ll be learning more in future lessons. If you want to learn more, check out this free Python3 course. | . . Share and discover ML projects at Made With ML. . &nbsp; &nbsp;",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/01/Python.html",
            "relUrl": "/jupyter/2020/02/01/Python.html",
            "date": " • Feb 1, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Numpy (✗)",
            "content": "Set up . import numpy as np . # Set seed for reproducibility np.random.seed(seed=1234) . Basics . Let&#39;s take a took at how to create tensors with NumPy. . Tensor: collection of values | . # Scalar x = np.array(6) # scalar print (&quot;x: &quot;, x) # Number of dimensions print (&quot;x ndim: &quot;, x.ndim) # Dimensions print (&quot;x shape:&quot;, x.shape) # Size of elements print (&quot;x size: &quot;, x.size) # Data type print (&quot;x dtype: &quot;, x.dtype) . x: 6 x ndim: 0 x shape: () x size: 1 x dtype: int64 . # Vector x = np.array([1.3 , 2.2 , 1.7]) print (&quot;x: &quot;, x) print (&quot;x ndim: &quot;, x.ndim) print (&quot;x shape:&quot;, x.shape) print (&quot;x size: &quot;, x.size) print (&quot;x dtype: &quot;, x.dtype) # notice the float datatype . x: [1.3 2.2 1.7] x ndim: 1 x shape: (3,) x size: 3 x dtype: float64 . # Matrix x = np.array([[1,2], [3,4]]) print (&quot;x: n&quot;, x) print (&quot;x ndim: &quot;, x.ndim) print (&quot;x shape:&quot;, x.shape) print (&quot;x size: &quot;, x.size) print (&quot;x dtype: &quot;, x.dtype) . x: [[1 2] [3 4]] x ndim: 2 x shape: (2, 2) x size: 4 x dtype: int64 . # 3-D Tensor x = np.array([[[1,2],[3,4]],[[5,6],[7,8]]]) print (&quot;x: n&quot;, x) print (&quot;x ndim: &quot;, x.ndim) print (&quot;x shape:&quot;, x.shape) print (&quot;x size: &quot;, x.size) print (&quot;x dtype: &quot;, x.dtype) . x: [[[1 2] [3 4]] [[5 6] [7 8]]] x ndim: 3 x shape: (2, 2, 2) x size: 8 x dtype: int64 . NumPy also comes with several functions that allow us to create tensors quickly. . # Functions print (&quot;np.zeros((2,2)): n&quot;, np.zeros((2,2))) print (&quot;np.ones((2,2)): n&quot;, np.ones((2,2))) print (&quot;np.eye((2)): n&quot;, np.eye((2))) # identity matrix print (&quot;np.random.random((2,2)): n&quot;, np.random.random((2,2))) . np.zeros((2,2)): [[0. 0.] [0. 0.]] np.ones((2,2)): [[1. 1.] [1. 1.]] np.eye((2)): [[1. 0.] [0. 1.]] np.random.random((2,2)): [[0.19151945 0.62210877] [0.43772774 0.78535858]] . Indexing . Keep in mind that when indexing the row and column, indices start at 0. And like indexing with lists, we can use negative indices as well (where -1 is the last item). . # Indexing x = np.array([1, 2, 3]) print (&quot;x: &quot;, x) print (&quot;x[0]: &quot;, x[0]) x[0] = 0 print (&quot;x: &quot;, x) . x: [1 2 3] x[0]: 1 x: [0 2 3] . # Slicing x = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) print (x) print (&quot;x column 1: &quot;, x[:, 1]) print (&quot;x row 0: &quot;, x[0, :]) print (&quot;x rows 0,1 &amp; cols 1,2: n&quot;, x[0:2, 1:3]) . [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] x column 1: [ 2 6 10] x row 0: [1 2 3 4] x rows 0,1 &amp; cols 1,2: [[2 3] [6 7]] . # Integer array indexing print (x) rows_to_get = np.array([0, 1, 2]) print (&quot;rows_to_get: &quot;, rows_to_get) cols_to_get = np.array([0, 2, 1]) print (&quot;cols_to_get: &quot;, cols_to_get) # Combine sequences above to get values to get print (&quot;indexed values: &quot;, x[rows_to_get, cols_to_get]) # (0, 0), (1, 2), (2, 1) . [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] rows_to_get: [0 1 2] cols_to_get: [0 2 1] indexed values: [ 1 7 10] . # Boolean array indexing x = np.array([[1, 2], [3, 4], [5, 6]]) print (&quot;x: n&quot;, x) print (&quot;x &gt; 2: n&quot;, x &gt; 2) print (&quot;x[x &gt; 2]: n&quot;, x[x &gt; 2]) . x: [[1 2] [3 4] [5 6]] x &gt; 2: [[False False] [ True True] [ True True]] x[x &gt; 2]: [3 4 5 6] . Arithmetic . # Basic math x = np.array([[1,2], [3,4]], dtype=np.float64) y = np.array([[1,2], [3,4]], dtype=np.float64) print (&quot;x + y: n&quot;, np.add(x, y)) # or x + y print (&quot;x - y: n&quot;, np.subtract(x, y)) # or x - y print (&quot;x * y: n&quot;, np.multiply(x, y)) # or x * y . x + y: [[2. 4.] [6. 8.]] x - y: [[0. 0.] [0. 0.]] x * y: [[ 1. 4.] [ 9. 16.]] . Dot product . One of the most common NumPy operations we’ll use in machine learning is matrix multiplication using the dot product. We take the rows of our first matrix (2) and the columns of our second matrix (2) to determine the dot product, giving us an output of [2 X 2]. The only requirement is that the inside dimensions match, in this case the first matrix has 3 columns and the second matrix has 3 rows. . # Dot product a = np.array([[1,2,3], [4,5,6]], dtype=np.float64) # we can specify dtype b = np.array([[7,8], [9,10], [11, 12]], dtype=np.float64) c = a.dot(b) print (f&quot;{a.shape} · {b.shape} = {c.shape}&quot;) print (c) . (2, 3) · (3, 2) = (2, 2) [[ 58. 64.] [139. 154.]] . Axis operations . We can also do operations across a specific axis. . # Sum across a dimension x = np.array([[1,2],[3,4]]) print (x) print (&quot;sum all: &quot;, np.sum(x)) # adds all elements print (&quot;sum axis=0: &quot;, np.sum(x, axis=0)) # sum across rows print (&quot;sum axis=1: &quot;, np.sum(x, axis=1)) # sum across columns . [[1 2] [3 4]] sum all: 10 sum axis=0: [4 6] sum axis=1: [3 7] . # Min/max x = np.array([[1,2,3], [4,5,6]]) print (&quot;min: &quot;, x.min()) print (&quot;max: &quot;, x.max()) print (&quot;min axis=0: &quot;, x.min(axis=0)) print (&quot;min axis=1: &quot;, x.min(axis=1)) . min: 1 max: 6 min axis=0: [1 2 3] min axis=1: [1 4] . Broadcasting . Here, we’re adding a vector with a scalar. Their dimensions aren’t compatible as is but how does NumPy still gives us the right result? This is where broadcasting comes in. The scalar is broadcast across the vector so that they have compatible shapes. . # Broadcasting x = np.array([1,2]) # vector y = np.array(3) # scalar z = x + y print (&quot;z: n&quot;, z) . z: [4 5] . Advanced . Transposing . We often need to change the dimensions of our tensors for operations like the dot product. If we need to switch two dimensions, we can transpose the tensor. . # Transposing x = np.array([[1,2,3], [4,5,6]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) y = np.transpose(x, (1,0)) # flip dimensions at index 0 and 1 print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) . x: [[1 2 3] [4 5 6]] x.shape: (2, 3) y: [[1 4] [2 5] [3 6]] y.shape: (3, 2) . Reshaping . Sometimes, we&#39;ll need to alter the dimensions of the matrix. Reshaping allows us to transform a tensor into different permissible shapes -- our reshaped tensor has the same amount of values in the tensor. (1X6 = 2X3). We can also use -1 on a dimension and NumPy will infer the dimension based on our input tensor. . The way reshape works is by looking at each dimension of the new tensor and separating our original tensor into that many units. So here the dimension at index 0 of the new tensor is 2 so we divide our original tensor into 2 units, and each of those has 3 values. . # Reshaping x = np.array([[1,2,3,4,5,6]]) print (x) print (&quot;x.shape: &quot;, x.shape) y = np.reshape(x, (2, 3)) print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) z = np.reshape(x, (2, -1)) print (&quot;z: n&quot;, z) print (&quot;z.shape: &quot;, z.shape) . [[1 2 3 4 5 6]] x.shape: (1, 6) y: [[1 2 3] [4 5 6]] y.shape: (2, 3) z: [[1 2 3] [4 5 6]] z.shape: (2, 3) . Unintended reshaping . Though reshaping is very convenient to manipulate tensors, we must be careful of their pitfalls as well. Let&#39;s look at the example below. Suppose we have x, which has the shape [2 X 3 X 4]. . [[[ 1 1 1 1] [ 2 2 2 2] [ 3 3 3 3]] [[10 10 10 10] [20 20 20 20] [30 30 30 30]]] . We want to reshape x so that it has shape [3 X 8] which we&#39;ll get by moving the dimension at index 0 to become the dimension at index 1 and then combining the last two dimensions. But when we do this, we want our output . to look like: ✅ . [[ 1 1 1 1 10 10 10 10] [ 2 2 2 2 20 20 20 20] [ 3 3 3 3 30 30 30 30]] . and not like: ❌ . [[ 1 1 1 1 2 2 2 2] [ 3 3 3 3 10 10 10 10] [20 20 20 20 30 30 30 30]] . even though they both have the same shape [3X8]. . x = np.array([[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]], [[10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) . x: [[[ 1 1 1 1] [ 2 2 2 2] [ 3 3 3 3]] [[10 10 10 10] [20 20 20 20] [30 30 30 30]]] x.shape: (2, 3, 4) . When we naively do a reshape, we get the right shape but the values are not what we&#39;re looking for. . # Unintended reshaping z_incorrect = np.reshape(x, (x.shape[1], -1)) print (&quot;z_incorrect: n&quot;, z_incorrect) print (&quot;z_incorrect.shape: &quot;, z_incorrect.shape) . z_incorrect: [[ 1 1 1 1 2 2 2 2] [ 3 3 3 3 10 10 10 10] [20 20 20 20 30 30 30 30]] z_incorrect.shape: (3, 8) . Instead, if we transpose the tensor and then do a reshape, we get our desired tensor. Transpose allows us to put our two vectors that we want to combine together and then we use reshape to join them together. Always create a dummy example like this when you’re unsure about reshaping. Blindly going by the tensor shape can lead to lots of issues downstream. . # Intended reshaping y = np.transpose(x, (1,0,2)) print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) z_correct = np.reshape(y, (y.shape[0], -1)) print (&quot;z_correct: n&quot;, z_correct) print (&quot;z_correct.shape: &quot;, z_correct.shape) . y: [[[ 1 1 1 1] [10 10 10 10]] [[ 2 2 2 2] [20 20 20 20]] [[ 3 3 3 3] [30 30 30 30]]] y.shape: (3, 2, 4) z_correct: [[ 1 1 1 1 10 10 10 10] [ 2 2 2 2 20 20 20 20] [ 3 3 3 3 30 30 30 30]] z_correct.shape: (3, 8) . Adding/removing dimensions . We can also easily add and remove dimensions to our tensors and we&#39;ll want to do this to make tensors compatible for certain operations. . # Adding dimensions x = np.array([[1,2,3],[4,5,6]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) y = np.expand_dims(x, 1) # expand dim 1 print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) # notice extra set of brackets are added . x: [[1 2 3] [4 5 6]] x.shape: (2, 3) y: [[[1 2 3]] [[4 5 6]]] y.shape: (2, 1, 3) . # Removing dimensions x = np.array([[[1,2,3]],[[4,5,6]]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) y = np.squeeze(x, 1) # squeeze dim 1 print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) # notice extra set of brackets are gone . x: [[[1 2 3]] [[4 5 6]]] x.shape: (2, 1, 3) y: [[1 2 3] [4 5 6]] y.shape: (2, 3) . Additional resources . NumPy reference manual: We don&#39;t have to memorize anything here and we will be taking a closer look at NumPy in the later lessons. If you want to learn more checkout the NumPy reference manual. | . . Share and discover ML projects at Made With ML. . &nbsp; &nbsp;",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/01/01/NumPy.html",
            "relUrl": "/jupyter/2020/01/01/NumPy.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Bilgi",
          "content": "Bu kitap Derin Öğrenme konusunda bazı temel konuları içermektedir. Bölümlerin genellikle “Dive into Deep Learning” kitabından alınması planlanmaktadır. Siz de bize yardım edebilirsiniz! . Katkıda bulunanlar: Ünver Çiftçi, Tayfun Ünal . Hata ve eklemeler için: unverciftci@gmail.com. .",
          "url": "https://unverciftci.github.io/derin_ogrenme/bilgi/",
          "relUrl": "/bilgi/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://unverciftci.github.io/derin_ogrenme/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}